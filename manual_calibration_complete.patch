diff --git a/MANUAL_CALIBRATION_CHANGELOG.md b/MANUAL_CALIBRATION_CHANGELOG.md
new file mode 100644
index 00000000..04907551
--- /dev/null
+++ b/MANUAL_CALIBRATION_CHANGELOG.md
@@ -0,0 +1,191 @@
+# 手动校准功能修改记录
+
+## 功能概述
+为GP2040-CE项目添加了独立的摇杆手动校准功能，支持摇杆1和摇杆2的独立校准，包括多步骤校准流程以提高精度。
+
+## 修改文件清单
+
+### 核心功能文件
+1. **src/addons/analog.cpp** - 模拟摇杆核心逻辑
+2. **src/webconfig.cpp** - Web配置API
+3. **www/src/Addons/Analog.tsx** - 前端界面
+
+### 配置文件
+4. **proto/config.proto** - 配置协议定义
+5. **configs/Pico/BoardConfig.h** - Pico板配置
+
+### 本地化文件
+6. **www/src/Locales/en/AddonsConfig.jsx** - 英文本地化
+7. **www/src/Locales/zh-CN/AddonsConfig.jsx** - 中文本地化
+8. **www/src/Locales/zh-CN/LayoutConfig.jsx** - 中文布局配置
+
+### 头文件
+9. **headers/addons/analog.h** - 模拟摇杆头文件
+10. **headers/buttonlayouts.h** - 按钮布局头文件
+11. **headers/drivers/ps4/PS4Descriptors.h** - PS4驱动描述符
+
+## 详细修改内容
+
+### 1. src/addons/analog.cpp
+
+#### 修改内容：
+- **readPin()函数**: 修改校准判断逻辑，支持手动校准
+  ```cpp
+  // 修改前
+  if (adc_pairs[stick_num].auto_calibration) {
+  
+  // 修改后
+  if (adc_pairs[stick_num].auto_calibration || center != 0) {
+  ```
+
+- **setup()函数**: 添加手动校准值的使用逻辑
+  ```cpp
+  // 添加手动校准值支持
+  adc_pairs[i].joystick_center_x = analogOptions.joystick_center_x;
+  adc_pairs[i].joystick_center_y = analogOptions.joystick_center_y;
+  ```
+
+#### 功能改进：
+- 支持手动校准和自动校准的混合使用
+- 手动校准值持久化保存
+- 校准逻辑更加智能
+
+### 2. src/webconfig.cpp
+
+#### 修改内容：
+- **添加头文件**: `#include "helper.h"`
+- **修改getJoystickCenter()**: 只读取摇杆1的中心值
+- **新增getJoystickCenter2()**: 专门读取摇杆2的中心值
+- **添加API路由**: `/api/getJoystickCenter2`
+
+#### API功能：
+```cpp
+// 摇杆1校准API
+std::string getJoystickCenter() {
+    // 读取摇杆1的ADC值
+    // 返回: {"success": true, "x": 2048, "y": 1956}
+}
+
+// 摇杆2校准API  
+std::string getJoystickCenter2() {
+    // 读取摇杆2的ADC值
+    // 返回: {"success": true, "x": 2048, "y": 1956}
+}
+```
+
+### 3. www/src/Addons/Analog.tsx
+
+#### 修改内容：
+- **组件参数**: 添加`setFieldValue`参数
+- **默认值**: 手动校准值改为0（原来是2048）
+- **验证schema**: 添加手动校准字段验证
+- **校准按钮**: 实现独立的多步骤校准流程
+- **提示信息**: 明确标注摇杆1/2
+
+#### 多步骤校准流程：
+1. 左上方向回中 → 记录中心值1
+2. 右上方向回中 → 记录中心值2  
+3. 左下方向回中 → 记录中心值3
+4. 右下方向回中 → 记录中心值4
+5. 计算四个点的平均值作为最终中心值
+
+#### 前端功能：
+```typescript
+// 摇杆1独立校准
+const calibrateStick1 = async () => {
+    // 4步骤校准流程
+    // 只更新 joystickCenterX, joystickCenterY
+}
+
+// 摇杆2独立校准  
+const calibrateStick2 = async () => {
+    // 4步骤校准流程
+    // 只更新 joystickCenterX2, joystickCenterY2
+}
+```
+
+### 4. proto/config.proto
+
+#### 添加字段：
+```protobuf
+optional uint32 joystick_center_x = 24;
+optional uint32 joystick_center_y = 25;
+optional uint32 joystick_center_x2 = 26;
+optional uint32 joystick_center_y2 = 27;
+```
+
+### 5. 本地化文件
+
+#### 添加翻译：
+- **英文**: `'analog-calibrate-button': 'Calibrate'`
+- **中文**: `'analog-calibrate-button': '手动校准'`
+
+## 功能特性
+
+### ✅ 独立校准
+- 摇杆1和摇杆2可以独立进行手动校准
+- 每个摇杆有自己的校准按钮和中心值显示
+- 互不干扰，可以分别优化
+
+### ✅ 多步骤校准
+- 4步骤校准流程：左上、右上、左下、右下
+- 计算四个回中值的平均值
+- 比单次测量更准确
+
+### ✅ 智能校准逻辑
+- 自动校准优先于手动校准
+- 手动校准值持久化保存
+- 支持混合模式使用
+
+### ✅ 用户友好界面
+- 清晰的步骤提示
+- 详细的校准结果显示
+- 可以随时取消校准
+- 明确的状态指示
+
+## 技术优势
+
+### 1. 更高的精度
+- 通过四个方向的回中值计算平均值
+- 减少了单次测量的误差
+- 更准确地反映摇杆的真实中心位置
+
+### 2. 更好的用户体验
+- 分步骤指导，用户不会感到困惑
+- 可以随时取消，不会强制完成
+- 详细的反馈信息，用户了解校准过程
+
+### 3. 向后兼容
+- 不影响现有的自动校准功能
+- 手动校准字段有默认值
+- 可以独立启用/禁用
+
+## 测试验证
+
+### 测试项目：
+- ✅ 摇杆1独立手动校准
+- ✅ 摇杆2独立手动校准
+- ✅ 多步骤校准流程
+- ✅ 自动校准功能正常
+- ✅ 配置保存/加载
+- ✅ 设备重启后校准值保持
+- ✅ 混合模式（一个自动，一个手动）
+
+### 测试结果：
+- 功能运行正常
+- 校准精度显著提高
+- 用户体验良好
+- 无兼容性问题
+
+## 版本信息
+- **基础版本**: GP2040-CE 0.7.12-beta3
+- **修改日期**: 2024年
+- **功能状态**: 已完成并测试通过
+- **移植状态**: 准备就绪
+
+## 移植准备
+- ✅ 修改记录完整
+- ✅ 功能测试通过
+- ✅ 文档齐全
+- ✅ 备份策略准备
+- ✅ 移植脚本准备
diff --git a/MANUAL_CALIBRATION_MIGRATION.md b/MANUAL_CALIBRATION_MIGRATION.md
new file mode 100644
index 00000000..e1160584
--- /dev/null
+++ b/MANUAL_CALIBRATION_MIGRATION.md
@@ -0,0 +1,72 @@
+# 手动校准功能移植指南
+
+## 修改文件清单
+
+### 后端文件
+1. **src/addons/analog.cpp**
+   - 修改 `readPin()` 函数：添加手动校准支持
+   - 修改 `setup()` 函数：使用手动校准值
+
+2. **src/webconfig.cpp**
+   - 添加 `#include "helper.h"`
+   - 修改 `getJoystickCenter()` 函数：只读取摇杆1
+   - 添加 `getJoystickCenter2()` 函数：读取摇杆2
+   - 添加API路由：`/api/getJoystickCenter2`
+
+### 前端文件
+3. **www/src/Addons/Analog.tsx**
+   - 修改组件参数：添加 `setFieldValue`
+   - 修改默认值：`joystickCenterX/Y/X2/Y2: 0`
+   - 添加验证schema：手动校准字段验证
+   - 修改校准按钮：独立的多步骤校准流程
+   - 更新提示信息：明确标注摇杆1/2
+
+### 配置文件
+4. **proto/config.proto** (通常已包含)
+   - 确认包含手动校准字段：
+     - `joystick_center_x`
+     - `joystick_center_y` 
+     - `joystick_center_x2`
+     - `joystick_center_y2`
+
+## 移植步骤
+
+### 1. 更新到目标版本
+```bash
+git checkout main
+git pull origin main
+git checkout -b manual-calibration-v0.7.12
+```
+
+### 2. 应用修改
+按文件清单逐一应用修改，注意：
+- 检查API路由表是否变化
+- 确认配置字段是否已存在
+- 验证前端组件结构是否变化
+
+### 3. 测试验证
+- 编译项目
+- 测试手动校准功能
+- 验证自动校准仍然工作
+- 检查配置保存/加载
+
+## 潜在冲突点
+
+### 1. API路由变化
+- 检查 `handlerFuncs[]` 数组结构
+- 确认路由注册方式
+
+### 2. 配置字段变化
+- 检查 `proto/config.proto` 字段定义
+- 确认字段编号不冲突
+
+### 3. 前端组件变化
+- 检查 `AddonPropTypes` 类型定义
+- 确认组件参数结构
+
+## 回退方案
+如果移植遇到问题，可以：
+1. 保留核心功能（基本手动校准）
+2. 简化多步骤校准流程
+3. 使用单次校准替代多步骤校准
+
diff --git a/configs/Pico/BoardConfig.h b/configs/Pico/BoardConfig.h
index ca2029f6..c37536fd 100644
--- a/configs/Pico/BoardConfig.h
+++ b/configs/Pico/BoardConfig.h
@@ -13,31 +13,37 @@
 
 // Main pin mapping Configuration
 //                                                  // GP2040 | Xinput | Switch  | PS3/4/5  | Dinput | Arcade |
-#define GPIO_PIN_02 GpioAction::BUTTON_PRESS_UP     // UP     | UP     | UP      | UP       | UP     | UP     |
-#define GPIO_PIN_03 GpioAction::BUTTON_PRESS_DOWN   // DOWN   | DOWN   | DOWN    | DOWN     | DOWN   | DOWN   |
-#define GPIO_PIN_04 GpioAction::BUTTON_PRESS_RIGHT  // RIGHT  | RIGHT  | RIGHT   | RIGHT    | RIGHT  | RIGHT  |
-#define GPIO_PIN_05 GpioAction::BUTTON_PRESS_LEFT   // LEFT   | LEFT   | LEFT    | LEFT     | LEFT   | LEFT   |
-#define GPIO_PIN_06 GpioAction::BUTTON_PRESS_B1     // B1     | A      | B       | Cross    | 2      | K1     |
-#define GPIO_PIN_07 GpioAction::BUTTON_PRESS_B2     // B2     | B      | A       | Circle   | 3      | K2     |
-#define GPIO_PIN_08 GpioAction::BUTTON_PRESS_R2     // R2     | RT     | ZR      | R2       | 8      | K3     |
-#define GPIO_PIN_09 GpioAction::BUTTON_PRESS_L2     // L2     | LT     | ZL      | L2       | 7      | K4     |
-#define GPIO_PIN_10 GpioAction::BUTTON_PRESS_B3     // B3     | X      | Y       | Square   | 1      | P1     |
-#define GPIO_PIN_11 GpioAction::BUTTON_PRESS_B4     // B4     | Y      | X       | Triangle | 4      | P2     |
-#define GPIO_PIN_12 GpioAction::BUTTON_PRESS_R1     // R1     | RB     | R       | R1       | 6      | P3     |
-#define GPIO_PIN_13 GpioAction::BUTTON_PRESS_L1     // L1     | LB     | L       | L1       | 5      | P4     |
-#define GPIO_PIN_16 GpioAction::BUTTON_PRESS_S1     // S1     | Back   | Minus   | Select   | 9      | Coin   |
-#define GPIO_PIN_17 GpioAction::BUTTON_PRESS_S2     // S2     | Start  | Plus    | Start    | 10     | Start  |
-#define GPIO_PIN_18 GpioAction::BUTTON_PRESS_L3     // L3     | LS     | LS      | L3       | 11     | LS     |
-#define GPIO_PIN_19 GpioAction::BUTTON_PRESS_R3     // R3     | RS     | RS      | R3       | 12     | RS     |
-#define GPIO_PIN_20 GpioAction::BUTTON_PRESS_A1     // A1     | Guide  | Home    | PS       | 13     | ~      |
-#define GPIO_PIN_21 GpioAction::BUTTON_PRESS_A2     // A2     | ~      | Capture | ~        | 14     | ~      |
+#define GPIO_PIN_00 GpioAction::BUTTON_PRESS_S1     // A1     | Guide  | Home    | PS       | 13     | ~      |
+#define GPIO_PIN_01 GpioAction::BUTTON_PRESS_S2     // A2     | ~      | Capture | ~        | 14     | ~      |
+#define GPIO_PIN_02 GpioAction::BUTTON_PRESS_RIGHT     // UP     | UP     | UP      | UP       | UP     | UP     |
+#define GPIO_PIN_03 GpioAction::BUTTON_PRESS_LEFT   // DOWN   | DOWN   | DOWN    | DOWN     | DOWN   | DOWN   |
+#define GPIO_PIN_04 GpioAction::BUTTON_PRESS_B1  // RIGHT  | RIGHT  | RIGHT   | RIGHT    | RIGHT  | RIGHT  |
+#define GPIO_PIN_05 GpioAction::BUTTON_PRESS_B4   // LEFT   | LEFT   | LEFT    | LEFT     | LEFT   | LEFT   |
+#define GPIO_PIN_06 GpioAction::BUTTON_PRESS_R1     // B1     | A      | B       | Cross    | 2      | K1     |
+#define GPIO_PIN_07 GpioAction::BUTTON_PRESS_R2     // B2     | B      | A       | Circle   | 3      | K2     |
+#define GPIO_PIN_08 GpioAction::BUTTON_PRESS_A2     // R2     | RT     | ZR      | R2       | 8      | K3     |
+#define GPIO_PIN_09 GpioAction::BUTTON_PRESS_B3     // L2     | LT     | ZL      | L2       | 7      | K4     |
+#define GPIO_PIN_10 GpioAction::BUTTON_PRESS_B2     // B3     | X      | Y       | Square   | 1      | P1     |
+#define GPIO_PIN_11 GpioAction::BUTTON_PRESS_A1     // B4     | Y      | X       | Triangle | 4      | P2     |
+#define GPIO_PIN_12 GpioAction::BUTTON_PRESS_DOWN     // R1     | RB     | R       | R1       | 6      | P3     |
+#define GPIO_PIN_13 GpioAction::BUTTON_PRESS_UP     // L1     | LB     | L       | L1       | 5      | P4     |
+#define GPIO_PIN_17 GpioAction::BUTTON_PRESS_L3     // S1     | Back   | Minus   | Select   | 9      | Coin   |
+#define GPIO_PIN_18 GpioAction::BUTTON_PRESS_L2     // S2     | Start  | Plus    | Start    | 10     | Start  |
+#define GPIO_PIN_19 GpioAction::BUTTON_PRESS_L1     // L3     | LS     | LS      | L3       | 11     | LS     |
+#define GPIO_PIN_22 GpioAction::BUTTON_PRESS_L3     // L3     | LS     | LS      | L3       | 11     | LS     |
+#define GPIO_PIN_24 GpioAction::BUTTON_PRESS_R3     // R3     | RS     | RS      | R3       | 12     | RS     |
+#define GPIO_PIN_25 GpioAction::BUTTON_PRESS_R3     // R3     | RS     | RS      | R3       | 12     | RS     |
+
 
 // Setting GPIO pins to assigned by add-on
 //
-#define GPIO_PIN_00 GpioAction::ASSIGNED_TO_ADDON
-#define GPIO_PIN_01 GpioAction::ASSIGNED_TO_ADDON
-#define GPIO_PIN_15 GpioAction::ASSIGNED_TO_ADDON
+#define GPIO_PIN_16 GpioAction::ASSIGNED_TO_ADDON
+#define GPIO_PIN_20 GpioAction::ASSIGNED_TO_ADDON
+#define GPIO_PIN_21 GpioAction::ASSIGNED_TO_ADDON
+#define GPIO_PIN_26 GpioAction::ASSIGNED_TO_ADDON
+#define GPIO_PIN_27 GpioAction::ASSIGNED_TO_ADDON
 #define GPIO_PIN_28 GpioAction::ASSIGNED_TO_ADDON
+#define GPIO_PIN_29 GpioAction::ASSIGNED_TO_ADDON
 
 // Keyboard Mapping Configuration
 //                                            // GP2040 | Xinput | Switch  | PS3/4/5  | Dinput | Arcade |
@@ -61,38 +67,149 @@
 #define KEY_BUTTON_A2   HID_KEY_F2            // A2     | ~      | Capture | ~        | 14     | ~      |
 #define KEY_BUTTON_FN   -1                    // Hotkey Function                                        |
 
-#define TURBO_ENABLED 1
-#define GPIO_PIN_14 GpioAction::BUTTON_PRESS_TURBO
-#define TURBO_LED_PIN 15
-
-#define BOARD_LEDS_PIN 28
-#define LED_BRIGHTNESS_MAXIMUM 100
-#define LED_BRIGHTNESS_STEPS 5
-#define LED_FORMAT LED_FORMAT_GRB
-#define LEDS_PER_PIXEL 1
-
-#define LEDS_DPAD_LEFT   0
-#define LEDS_DPAD_DOWN   1
-#define LEDS_DPAD_RIGHT  2
-#define LEDS_DPAD_UP     3
-#define LEDS_BUTTON_B3   4
-#define LEDS_BUTTON_B4   5
-#define LEDS_BUTTON_R1   6
-#define LEDS_BUTTON_L1   7
-#define LEDS_BUTTON_B1   8
-#define LEDS_BUTTON_B2   9
-#define LEDS_BUTTON_R2   10
-#define LEDS_BUTTON_L2   11
-#define LEDS_BUTTON_A1   12
-#define LEDS_BUTTON_L3   13
-#define LEDS_BUTTON_R3   14
-#define LEDS_BUTTON_A2   15
+// LED Configuration
+#define BOARD_LEDS_PIN 16
+#define LED_BRIGHTNESS_MAXIMUM 80
+#define CASE_RGB_TYPE  CASE_RGB_TYPE_AMBIENT
+#define CASE_RGB_INDEX 0
+#define CASE_RGB_COUNT 1
+
+// analog stick configuration
+#define ANALOG_INPUT_ENABLED        1
+#define ANALOG_ADC_1_VRX            27
+#define ANALOG_ADC_1_VRY            26
+#define ANALOG_ADC_2_VRX            29
+#define ANALOG_ADC_2_VRY            28
+#define FORCED_CIRCULARITY_ENABLED  1
+#define FORCED_CIRCULARITY2_ENABLED 1
+#define DEFAULT_INNER_DEADZONE      0
+#define DEFAULT_INNER_DEADZONE2     0
+#define DEFAULT_OUTER_DEADZONE      63
+#define DEFAULT_OUTER_DEADZONE2     63
+#define AUTO_CALIBRATE_ENABLED      0
+#define AUTO_CALIBRATE2_ENABLED     0
+#define ANALOG_ERROR 958
+#define ANALOG_ERROR2 958
+
+// USB Passthrough
+//#define USB_PERIPHERAL_ENABLED 1
+//#define USB_PERIPHERAL_PIN_DPLUS 14
+//#define USB_PERIPHERAL_PIN_ORDER 0
+
+// PS AUTH
+#define DEFAULT_PS4CONTROLLER_TYPE PS4_CONTROLLER
+#define DEFAULT_PS4_ID_MODE PS4_ID_EMULATION
+#define DEFAULT_PS4AUTHENTICATION_TYPE INPUT_MODE_AUTH_TYPE_KEYS
+
+// Input Modes
+#define DEFAULT_INPUT_MODE INPUT_MODE_PS4
+#define DEFAULT_INPUT_MODE_B2 INPUT_MODE_XINPUT
+#define DEFAULT_INPUT_MODE_B3 INPUT_MODE_PS4
+#define DEFAULT_INPUT_MODE_B4 -1
+#define DEFAULT_INPUT_MODE_B1 -1
+#define DEFAULT_INPUT_MODE_R2 -1
+#define DEFAULT_INPUT_MODE_L2 -1
+#define DEFAULT_INPUT_MODE_R1 -1
+#define DEFAULT_INPUT_MODE_L1 -1
 
+// mini led
+#define MINI_MENU_GAMEPAD_INPUT 1 
 #define HAS_I2C_DISPLAY 1
 #define I2C0_ENABLED 1
-#define I2C0_PIN_SDA 0
-#define I2C0_PIN_SCL 1
-#define BUTTON_LAYOUT BUTTON_LAYOUT_STICKLESS
-#define BUTTON_LAYOUT_RIGHT BUTTON_LAYOUT_STICKLESSB
+#define I2C0_PIN_SDA 20
+#define I2C0_PIN_SCL 21
+#define SPLASH_MODE SPLASH_MODE_STATIC
+#define SPLASH_DURATION 2000
+
+// MINI LED layout
+ #define BUTTON_LAYOUT BUTTON_LAYOUT_BOARD_DEFINED_A
+ #define BUTTON_LAYOUT_RIGHT BUTTON_LAYOUT_BOARD_DEFINED_B
+
+ // HML layout WASD
+ #define DEFAULT_BOARD_LAYOUT_A {\
+    {GP_ELEMENT_PIN_BUTTON, {19, 26, 26, 33, 1, 1,  5,     GP_SHAPE_SQUARE, 22}},\
+    {GP_ELEMENT_PIN_BUTTON, {27, 30, 34, 37, 1, 1,  3,     GP_SHAPE_SQUARE, 22}},\
+    {GP_ELEMENT_PIN_BUTTON, {35, 34, 42, 41, 1, 1,  4,     GP_SHAPE_SQUARE, 22}},\
+    {GP_ELEMENT_PIN_BUTTON, {27, 22, 42, 29, 1, 1, 18,     GP_SHAPE_SQUARE, 22}}\
+}
+
+// HML layout right
+#define DEFAULT_BOARD_LAYOUT_B {\
+    {GP_ELEMENT_BTN_BUTTON, {96, 30, 12, 12, 1, 1, GAMEPAD_MASK_B4,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {79, 42, 12, 12, 1, 1, GAMEPAD_MASK_B3,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {113, 42, 12, 12, 1, 1, GAMEPAD_MASK_B2,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {96, 55, 12, 12, 1, 1, GAMEPAD_MASK_B1,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {79,  9, 15, 7, 1, 1, GAMEPAD_MASK_L1,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {109, 9, 15, 7, 1, 1, GAMEPAD_MASK_R1,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {79,  17, 15, 7, 1, 1, GAMEPAD_MASK_L2,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {109, 17, 15, 7, 1, 1, GAMEPAD_MASK_R2,      GP_SHAPE_ELLIPSE}}\
+}
+
+// HML logo
+#define DEFAULT_SPLASH \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x3F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, \
+  0x3F, 0xFF, 0xA3, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x40, 0x00, \
+  0x3F, 0xFF, 0xB3, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x60, 0x00, \
+  0x3F, 0xFF, 0xB3, 0xFF, 0xF8, 0x07, 0xFF, 0xC0, 0x00, 0xFF, 0xFE, 0x00, 0xFF, 0xFF, 0x60, 0x00, \
+  0x1F, 0xFF, 0xB3, 0xFF, 0xFB, 0x07, 0xFF, 0xF0, 0x01, 0xFF, 0xFE, 0x00, 0xFF, 0xFF, 0x60, 0x00, \
+  0x01, 0xF8, 0x33, 0xFF, 0xFB, 0x07, 0xFF, 0xFA, 0x01, 0xFF, 0xFE, 0x40, 0xFF, 0xFF, 0x70, 0x00, \
+  0x01, 0xF8, 0x30, 0x7F, 0xFB, 0x87, 0xFF, 0xF9, 0x01, 0xFF, 0xFE, 0x40, 0xFF, 0xE0, 0x70, 0x00, \
+  0x19, 0xF9, 0xF0, 0x3F, 0x83, 0x87, 0xFF, 0xF9, 0x83, 0xFF, 0xFE, 0x60, 0x0F, 0xE0, 0x70, 0x00, \
+  0x09, 0xFB, 0xF1, 0x3F, 0x03, 0x80, 0x7F, 0xFC, 0xC3, 0xFF, 0xC0, 0x60, 0x07, 0xEF, 0xF0, 0x00, \
+  0x09, 0xF9, 0xF1, 0x3F, 0x3F, 0x83, 0x7F, 0xFC, 0xC3, 0xFF, 0xCF, 0xE0, 0x67, 0xEF, 0xF0, 0x00, \
+  0x01, 0xF9, 0xF0, 0x3F, 0x3F, 0x83, 0x7E, 0xFE, 0xE7, 0xEF, 0xCF, 0xE0, 0x27, 0xEF, 0xF0, 0x00, \
+  0x01, 0xF9, 0xF0, 0x3F, 0x3F, 0x81, 0x7E, 0xFE, 0x67, 0xEF, 0xCF, 0xE0, 0x27, 0xEF, 0xE0, 0x00, \
+  0x01, 0xF9, 0x80, 0x3F, 0x3F, 0x00, 0x7E, 0x7E, 0x67, 0xCF, 0xCF, 0xE0, 0x07, 0xEE, 0x00, 0x00, \
+  0x01, 0xF8, 0x00, 0x3F, 0x30, 0x00, 0x7E, 0x7F, 0x6F, 0xCF, 0xCC, 0x00, 0x07, 0xEE, 0x00, 0x00, \
+  0x01, 0xFF, 0xE0, 0x3F, 0x30, 0x00, 0x7E, 0x7F, 0x0F, 0xCF, 0xCC, 0x00, 0x07, 0xEE, 0x00, 0x00, \
+  0x01, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x7E, 0x3F, 0x8F, 0x8F, 0xCC, 0x00, 0x07, 0xEE, 0x00, 0x00, \
+  0x01, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x7E, 0x3F, 0x9F, 0x8F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xC0, \
+  0x01, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x7E, 0x9F, 0x9F, 0x8F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xC8, \
+  0x01, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x7E, 0x9F, 0xFF, 0x0F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
+  0x01, 0xF8, 0x00, 0x3F, 0x30, 0x00, 0x7E, 0xDF, 0xFF, 0x6F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
+  0x01, 0xF9, 0xFF, 0x3F, 0x30, 0x00, 0x7E, 0xCF, 0xFE, 0x6F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
+  0x01, 0xF9, 0xFF, 0x3F, 0x30, 0x00, 0x7E, 0xEF, 0xFE, 0x6F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
+  0x01, 0xF9, 0xFF, 0x3F, 0x30, 0x00, 0x7E, 0xE7, 0xFE, 0xEF, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
+  0x01, 0xF9, 0xFF, 0x3F, 0x30, 0x00, 0x7E, 0xE7, 0xFC, 0xEF, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
+  0x01, 0xF9, 0x80, 0x3F, 0x30, 0x00, 0x7E, 0x07, 0xFC, 0xCF, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
+  0x01, 0xF8, 0x00, 0x3F, 0x00, 0x00, 0x7E, 0x03, 0xFC, 0x0F, 0xC0, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
+  0x01, 0xF8, 0x00, 0x7F, 0xF8, 0x07, 0xFF, 0xC3, 0xF8, 0x7F, 0xFE, 0x00, 0x0F, 0xE0, 0x0F, 0xCC, \
+  0x01, 0xFF, 0x03, 0xFF, 0xF8, 0x07, 0xFF, 0xCB, 0xFA, 0x7F, 0xFE, 0x00, 0xFF, 0xF8, 0x0F, 0xCC, \
+  0x3F, 0xFF, 0x83, 0xFF, 0xFB, 0x07, 0xFF, 0xC9, 0xFA, 0x7F, 0xFE, 0x40, 0xFF, 0xFF, 0xFF, 0xCC, \
+  0x3F, 0xFF, 0xB3, 0xFF, 0xFB, 0x87, 0xFF, 0xCD, 0xF2, 0x7F, 0xFE, 0x60, 0xFF, 0xFF, 0xFF, 0xCC, \
+  0x3F, 0xFF, 0xBB, 0xFF, 0xFB, 0x87, 0xFF, 0xCC, 0x76, 0x7F, 0xFE, 0x60, 0xFF, 0xFF, 0xFF, 0xCC, \
+  0x3F, 0xFF, 0xBB, 0xFF, 0x83, 0x80, 0x00, 0x0C, 0x06, 0x00, 0x00, 0x60, 0xFF, 0xFF, 0xFF, 0xCC, \
+  0x3F, 0xFF, 0x38, 0x00, 0x03, 0x83, 0xFF, 0xFC, 0x7E, 0x00, 0x00, 0x60, 0x0F, 0xFF, 0xFF, 0xCC, \
+  0x3F, 0xC0, 0x38, 0x0F, 0xFF, 0x83, 0xFF, 0xFC, 0x3E, 0x3F, 0xFF, 0xE0, 0x00, 0x3F, 0xFF, 0xCC, \
+  0x10, 0x00, 0x79, 0xFF, 0xFF, 0x81, 0xFF, 0xFC, 0x1E, 0x1F, 0xFF, 0xE0, 0x7C, 0x00, 0x0F, 0xCC, \
+  0x00, 0x1F, 0xF8, 0xFF, 0xFF, 0x80, 0xFF, 0xF0, 0x0C, 0x1F, 0xFF, 0xE0, 0x3F, 0xF0, 0x00, 0x0C, \
+  0x07, 0xFF, 0xF8, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x3F, 0xFF, 0x80, 0x0C, \
+  0x1F, 0xFF, 0xF8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFC, \
+  0x0F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFC, \
+  0x0F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFC, \
+  0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 
-#endif
\ No newline at end of file
+#endif
diff --git a/headers/addons/analog.h b/headers/addons/analog.h
index 5893ef3c..9d0a5c4b 100644
--- a/headers/addons/analog.h
+++ b/headers/addons/analog.h
@@ -128,6 +128,8 @@ typedef struct
     float out_deadzone;
     bool auto_calibration;
     bool forced_circularity;
+    uint32_t joystick_center_x;
+    uint32_t joystick_center_y;
 } adc_instance;
 
 class AnalogInput : public GPAddon {
@@ -148,4 +150,4 @@ private:
     adc_instance adc_pairs[ADC_COUNT];
 };
 
-#endif  // _Analog_H_
\ No newline at end of file
+#endif  // _Analog_H_
diff --git a/headers/buttonlayouts.h b/headers/buttonlayouts.h
index f13ede33..c6373491 100644
--- a/headers/buttonlayouts.h
+++ b/headers/buttonlayouts.h
@@ -12,10 +12,14 @@
 #define BUTTON_GROUP_TWINSTICK_B               {{GP_ELEMENT_LEVER,  {109, 37, 10, 10, 1, 0, 0}}}
 
 #define BUTTON_GROUP_STICKLESS {\
-    {GP_ELEMENT_DIR_BUTTON, {8,  20, 8, 8, 1, 1, GAMEPAD_MASK_LEFT,    GP_SHAPE_ELLIPSE}},\
-    {GP_ELEMENT_DIR_BUTTON, {26, 20, 8, 8, 1, 1, GAMEPAD_MASK_DOWN,    GP_SHAPE_ELLIPSE}},\
-    {GP_ELEMENT_DIR_BUTTON, {41, 29, 8, 8, 1, 1, GAMEPAD_MASK_RIGHT,   GP_SHAPE_ELLIPSE}},\
-    {GP_ELEMENT_DIR_BUTTON, {48, 53, 8, 8, 1, 1, GAMEPAD_MASK_UP,      GP_SHAPE_ELLIPSE}}\
+    {GP_ELEMENT_BTN_BUTTON, {96, 30, 12, 12, 1, 1, GAMEPAD_MASK_B4,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {79, 42, 12, 12, 1, 1, GAMEPAD_MASK_B3,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {113, 42, 12, 12, 1, 1, GAMEPAD_MASK_B2,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {96, 55, 12, 12, 1, 1, GAMEPAD_MASK_B1,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {79,  9, 15, 7, 1, 1, GAMEPAD_MASK_L1,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {109, 9, 15, 7, 1, 1, GAMEPAD_MASK_R1,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {79,  17, 15, 7, 1, 1, GAMEPAD_MASK_L2,      GP_SHAPE_ELLIPSE}},\
+    {GP_ELEMENT_BTN_BUTTON, {109, 17, 15, 7, 1, 1, GAMEPAD_MASK_R2,      GP_SHAPE_ELLIPSE}}\
 }
 
 #define BUTTON_GROUP_WASD_BOX {\
diff --git a/headers/drivers/ps4/PS4Descriptors.h b/headers/drivers/ps4/PS4Descriptors.h
index 66e41162..4ddb9b3b 100644
--- a/headers/drivers/ps4/PS4Descriptors.h
+++ b/headers/drivers/ps4/PS4Descriptors.h
@@ -419,8 +419,8 @@ typedef struct __attribute__((packed)) {
 } PS4Report;
 
 static const uint8_t ps4_string_language[]     = { 0x09, 0x04 };
-static const uint8_t ps4_string_manufacturer[] = "Open Stick Community";
-static const uint8_t ps4_string_product[]      = "GP2040-CE (PS4)";
+static const uint8_t ps4_string_manufacturer[] = "Sony";
+static const uint8_t ps4_string_product[]      = "Wireless Controller";
 static const uint8_t ps4_string_version[]      = "1.0";
 
 static const uint8_t *ps4_string_descriptors[] __attribute__((unused)) =
diff --git a/manual_calibration.patch b/manual_calibration.patch
new file mode 100644
index 00000000..7d36a2a3
--- /dev/null
+++ b/manual_calibration.patch
@@ -0,0 +1,1363 @@
+diff --git a/configs/Pico/BoardConfig.h b/configs/Pico/BoardConfig.h
+index ca2029f6..c37536fd 100644
+--- a/configs/Pico/BoardConfig.h
++++ b/configs/Pico/BoardConfig.h
+@@ -13,31 +13,37 @@
+ 
+ // Main pin mapping Configuration
+ //                                                  // GP2040 | Xinput | Switch  | PS3/4/5  | Dinput | Arcade |
+-#define GPIO_PIN_02 GpioAction::BUTTON_PRESS_UP     // UP     | UP     | UP      | UP       | UP     | UP     |
+-#define GPIO_PIN_03 GpioAction::BUTTON_PRESS_DOWN   // DOWN   | DOWN   | DOWN    | DOWN     | DOWN   | DOWN   |
+-#define GPIO_PIN_04 GpioAction::BUTTON_PRESS_RIGHT  // RIGHT  | RIGHT  | RIGHT   | RIGHT    | RIGHT  | RIGHT  |
+-#define GPIO_PIN_05 GpioAction::BUTTON_PRESS_LEFT   // LEFT   | LEFT   | LEFT    | LEFT     | LEFT   | LEFT   |
+-#define GPIO_PIN_06 GpioAction::BUTTON_PRESS_B1     // B1     | A      | B       | Cross    | 2      | K1     |
+-#define GPIO_PIN_07 GpioAction::BUTTON_PRESS_B2     // B2     | B      | A       | Circle   | 3      | K2     |
+-#define GPIO_PIN_08 GpioAction::BUTTON_PRESS_R2     // R2     | RT     | ZR      | R2       | 8      | K3     |
+-#define GPIO_PIN_09 GpioAction::BUTTON_PRESS_L2     // L2     | LT     | ZL      | L2       | 7      | K4     |
+-#define GPIO_PIN_10 GpioAction::BUTTON_PRESS_B3     // B3     | X      | Y       | Square   | 1      | P1     |
+-#define GPIO_PIN_11 GpioAction::BUTTON_PRESS_B4     // B4     | Y      | X       | Triangle | 4      | P2     |
+-#define GPIO_PIN_12 GpioAction::BUTTON_PRESS_R1     // R1     | RB     | R       | R1       | 6      | P3     |
+-#define GPIO_PIN_13 GpioAction::BUTTON_PRESS_L1     // L1     | LB     | L       | L1       | 5      | P4     |
+-#define GPIO_PIN_16 GpioAction::BUTTON_PRESS_S1     // S1     | Back   | Minus   | Select   | 9      | Coin   |
+-#define GPIO_PIN_17 GpioAction::BUTTON_PRESS_S2     // S2     | Start  | Plus    | Start    | 10     | Start  |
+-#define GPIO_PIN_18 GpioAction::BUTTON_PRESS_L3     // L3     | LS     | LS      | L3       | 11     | LS     |
+-#define GPIO_PIN_19 GpioAction::BUTTON_PRESS_R3     // R3     | RS     | RS      | R3       | 12     | RS     |
+-#define GPIO_PIN_20 GpioAction::BUTTON_PRESS_A1     // A1     | Guide  | Home    | PS       | 13     | ~      |
+-#define GPIO_PIN_21 GpioAction::BUTTON_PRESS_A2     // A2     | ~      | Capture | ~        | 14     | ~      |
++#define GPIO_PIN_00 GpioAction::BUTTON_PRESS_S1     // A1     | Guide  | Home    | PS       | 13     | ~      |
++#define GPIO_PIN_01 GpioAction::BUTTON_PRESS_S2     // A2     | ~      | Capture | ~        | 14     | ~      |
++#define GPIO_PIN_02 GpioAction::BUTTON_PRESS_RIGHT     // UP     | UP     | UP      | UP       | UP     | UP     |
++#define GPIO_PIN_03 GpioAction::BUTTON_PRESS_LEFT   // DOWN   | DOWN   | DOWN    | DOWN     | DOWN   | DOWN   |
++#define GPIO_PIN_04 GpioAction::BUTTON_PRESS_B1  // RIGHT  | RIGHT  | RIGHT   | RIGHT    | RIGHT  | RIGHT  |
++#define GPIO_PIN_05 GpioAction::BUTTON_PRESS_B4   // LEFT   | LEFT   | LEFT    | LEFT     | LEFT   | LEFT   |
++#define GPIO_PIN_06 GpioAction::BUTTON_PRESS_R1     // B1     | A      | B       | Cross    | 2      | K1     |
++#define GPIO_PIN_07 GpioAction::BUTTON_PRESS_R2     // B2     | B      | A       | Circle   | 3      | K2     |
++#define GPIO_PIN_08 GpioAction::BUTTON_PRESS_A2     // R2     | RT     | ZR      | R2       | 8      | K3     |
++#define GPIO_PIN_09 GpioAction::BUTTON_PRESS_B3     // L2     | LT     | ZL      | L2       | 7      | K4     |
++#define GPIO_PIN_10 GpioAction::BUTTON_PRESS_B2     // B3     | X      | Y       | Square   | 1      | P1     |
++#define GPIO_PIN_11 GpioAction::BUTTON_PRESS_A1     // B4     | Y      | X       | Triangle | 4      | P2     |
++#define GPIO_PIN_12 GpioAction::BUTTON_PRESS_DOWN     // R1     | RB     | R       | R1       | 6      | P3     |
++#define GPIO_PIN_13 GpioAction::BUTTON_PRESS_UP     // L1     | LB     | L       | L1       | 5      | P4     |
++#define GPIO_PIN_17 GpioAction::BUTTON_PRESS_L3     // S1     | Back   | Minus   | Select   | 9      | Coin   |
++#define GPIO_PIN_18 GpioAction::BUTTON_PRESS_L2     // S2     | Start  | Plus    | Start    | 10     | Start  |
++#define GPIO_PIN_19 GpioAction::BUTTON_PRESS_L1     // L3     | LS     | LS      | L3       | 11     | LS     |
++#define GPIO_PIN_22 GpioAction::BUTTON_PRESS_L3     // L3     | LS     | LS      | L3       | 11     | LS     |
++#define GPIO_PIN_24 GpioAction::BUTTON_PRESS_R3     // R3     | RS     | RS      | R3       | 12     | RS     |
++#define GPIO_PIN_25 GpioAction::BUTTON_PRESS_R3     // R3     | RS     | RS      | R3       | 12     | RS     |
++
+ 
+ // Setting GPIO pins to assigned by add-on
+ //
+-#define GPIO_PIN_00 GpioAction::ASSIGNED_TO_ADDON
+-#define GPIO_PIN_01 GpioAction::ASSIGNED_TO_ADDON
+-#define GPIO_PIN_15 GpioAction::ASSIGNED_TO_ADDON
++#define GPIO_PIN_16 GpioAction::ASSIGNED_TO_ADDON
++#define GPIO_PIN_20 GpioAction::ASSIGNED_TO_ADDON
++#define GPIO_PIN_21 GpioAction::ASSIGNED_TO_ADDON
++#define GPIO_PIN_26 GpioAction::ASSIGNED_TO_ADDON
++#define GPIO_PIN_27 GpioAction::ASSIGNED_TO_ADDON
+ #define GPIO_PIN_28 GpioAction::ASSIGNED_TO_ADDON
++#define GPIO_PIN_29 GpioAction::ASSIGNED_TO_ADDON
+ 
+ // Keyboard Mapping Configuration
+ //                                            // GP2040 | Xinput | Switch  | PS3/4/5  | Dinput | Arcade |
+@@ -61,38 +67,149 @@
+ #define KEY_BUTTON_A2   HID_KEY_F2            // A2     | ~      | Capture | ~        | 14     | ~      |
+ #define KEY_BUTTON_FN   -1                    // Hotkey Function                                        |
+ 
+-#define TURBO_ENABLED 1
+-#define GPIO_PIN_14 GpioAction::BUTTON_PRESS_TURBO
+-#define TURBO_LED_PIN 15
+-
+-#define BOARD_LEDS_PIN 28
+-#define LED_BRIGHTNESS_MAXIMUM 100
+-#define LED_BRIGHTNESS_STEPS 5
+-#define LED_FORMAT LED_FORMAT_GRB
+-#define LEDS_PER_PIXEL 1
+-
+-#define LEDS_DPAD_LEFT   0
+-#define LEDS_DPAD_DOWN   1
+-#define LEDS_DPAD_RIGHT  2
+-#define LEDS_DPAD_UP     3
+-#define LEDS_BUTTON_B3   4
+-#define LEDS_BUTTON_B4   5
+-#define LEDS_BUTTON_R1   6
+-#define LEDS_BUTTON_L1   7
+-#define LEDS_BUTTON_B1   8
+-#define LEDS_BUTTON_B2   9
+-#define LEDS_BUTTON_R2   10
+-#define LEDS_BUTTON_L2   11
+-#define LEDS_BUTTON_A1   12
+-#define LEDS_BUTTON_L3   13
+-#define LEDS_BUTTON_R3   14
+-#define LEDS_BUTTON_A2   15
++// LED Configuration
++#define BOARD_LEDS_PIN 16
++#define LED_BRIGHTNESS_MAXIMUM 80
++#define CASE_RGB_TYPE  CASE_RGB_TYPE_AMBIENT
++#define CASE_RGB_INDEX 0
++#define CASE_RGB_COUNT 1
++
++// analog stick configuration
++#define ANALOG_INPUT_ENABLED        1
++#define ANALOG_ADC_1_VRX            27
++#define ANALOG_ADC_1_VRY            26
++#define ANALOG_ADC_2_VRX            29
++#define ANALOG_ADC_2_VRY            28
++#define FORCED_CIRCULARITY_ENABLED  1
++#define FORCED_CIRCULARITY2_ENABLED 1
++#define DEFAULT_INNER_DEADZONE      0
++#define DEFAULT_INNER_DEADZONE2     0
++#define DEFAULT_OUTER_DEADZONE      63
++#define DEFAULT_OUTER_DEADZONE2     63
++#define AUTO_CALIBRATE_ENABLED      0
++#define AUTO_CALIBRATE2_ENABLED     0
++#define ANALOG_ERROR 958
++#define ANALOG_ERROR2 958
++
++// USB Passthrough
++//#define USB_PERIPHERAL_ENABLED 1
++//#define USB_PERIPHERAL_PIN_DPLUS 14
++//#define USB_PERIPHERAL_PIN_ORDER 0
++
++// PS AUTH
++#define DEFAULT_PS4CONTROLLER_TYPE PS4_CONTROLLER
++#define DEFAULT_PS4_ID_MODE PS4_ID_EMULATION
++#define DEFAULT_PS4AUTHENTICATION_TYPE INPUT_MODE_AUTH_TYPE_KEYS
++
++// Input Modes
++#define DEFAULT_INPUT_MODE INPUT_MODE_PS4
++#define DEFAULT_INPUT_MODE_B2 INPUT_MODE_XINPUT
++#define DEFAULT_INPUT_MODE_B3 INPUT_MODE_PS4
++#define DEFAULT_INPUT_MODE_B4 -1
++#define DEFAULT_INPUT_MODE_B1 -1
++#define DEFAULT_INPUT_MODE_R2 -1
++#define DEFAULT_INPUT_MODE_L2 -1
++#define DEFAULT_INPUT_MODE_R1 -1
++#define DEFAULT_INPUT_MODE_L1 -1
+ 
++// mini led
++#define MINI_MENU_GAMEPAD_INPUT 1 
+ #define HAS_I2C_DISPLAY 1
+ #define I2C0_ENABLED 1
+-#define I2C0_PIN_SDA 0
+-#define I2C0_PIN_SCL 1
+-#define BUTTON_LAYOUT BUTTON_LAYOUT_STICKLESS
+-#define BUTTON_LAYOUT_RIGHT BUTTON_LAYOUT_STICKLESSB
++#define I2C0_PIN_SDA 20
++#define I2C0_PIN_SCL 21
++#define SPLASH_MODE SPLASH_MODE_STATIC
++#define SPLASH_DURATION 2000
++
++// MINI LED layout
++ #define BUTTON_LAYOUT BUTTON_LAYOUT_BOARD_DEFINED_A
++ #define BUTTON_LAYOUT_RIGHT BUTTON_LAYOUT_BOARD_DEFINED_B
++
++ // HML layout WASD
++ #define DEFAULT_BOARD_LAYOUT_A {\
++    {GP_ELEMENT_PIN_BUTTON, {19, 26, 26, 33, 1, 1,  5,     GP_SHAPE_SQUARE, 22}},\
++    {GP_ELEMENT_PIN_BUTTON, {27, 30, 34, 37, 1, 1,  3,     GP_SHAPE_SQUARE, 22}},\
++    {GP_ELEMENT_PIN_BUTTON, {35, 34, 42, 41, 1, 1,  4,     GP_SHAPE_SQUARE, 22}},\
++    {GP_ELEMENT_PIN_BUTTON, {27, 22, 42, 29, 1, 1, 18,     GP_SHAPE_SQUARE, 22}}\
++}
++
++// HML layout right
++#define DEFAULT_BOARD_LAYOUT_B {\
++    {GP_ELEMENT_BTN_BUTTON, {96, 30, 12, 12, 1, 1, GAMEPAD_MASK_B4,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {79, 42, 12, 12, 1, 1, GAMEPAD_MASK_B3,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {113, 42, 12, 12, 1, 1, GAMEPAD_MASK_B2,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {96, 55, 12, 12, 1, 1, GAMEPAD_MASK_B1,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {79,  9, 15, 7, 1, 1, GAMEPAD_MASK_L1,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {109, 9, 15, 7, 1, 1, GAMEPAD_MASK_R1,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {79,  17, 15, 7, 1, 1, GAMEPAD_MASK_L2,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {109, 17, 15, 7, 1, 1, GAMEPAD_MASK_R2,      GP_SHAPE_ELLIPSE}}\
++}
++
++// HML logo
++#define DEFAULT_SPLASH \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x3F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, \
++  0x3F, 0xFF, 0xA3, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x40, 0x00, \
++  0x3F, 0xFF, 0xB3, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x60, 0x00, \
++  0x3F, 0xFF, 0xB3, 0xFF, 0xF8, 0x07, 0xFF, 0xC0, 0x00, 0xFF, 0xFE, 0x00, 0xFF, 0xFF, 0x60, 0x00, \
++  0x1F, 0xFF, 0xB3, 0xFF, 0xFB, 0x07, 0xFF, 0xF0, 0x01, 0xFF, 0xFE, 0x00, 0xFF, 0xFF, 0x60, 0x00, \
++  0x01, 0xF8, 0x33, 0xFF, 0xFB, 0x07, 0xFF, 0xFA, 0x01, 0xFF, 0xFE, 0x40, 0xFF, 0xFF, 0x70, 0x00, \
++  0x01, 0xF8, 0x30, 0x7F, 0xFB, 0x87, 0xFF, 0xF9, 0x01, 0xFF, 0xFE, 0x40, 0xFF, 0xE0, 0x70, 0x00, \
++  0x19, 0xF9, 0xF0, 0x3F, 0x83, 0x87, 0xFF, 0xF9, 0x83, 0xFF, 0xFE, 0x60, 0x0F, 0xE0, 0x70, 0x00, \
++  0x09, 0xFB, 0xF1, 0x3F, 0x03, 0x80, 0x7F, 0xFC, 0xC3, 0xFF, 0xC0, 0x60, 0x07, 0xEF, 0xF0, 0x00, \
++  0x09, 0xF9, 0xF1, 0x3F, 0x3F, 0x83, 0x7F, 0xFC, 0xC3, 0xFF, 0xCF, 0xE0, 0x67, 0xEF, 0xF0, 0x00, \
++  0x01, 0xF9, 0xF0, 0x3F, 0x3F, 0x83, 0x7E, 0xFE, 0xE7, 0xEF, 0xCF, 0xE0, 0x27, 0xEF, 0xF0, 0x00, \
++  0x01, 0xF9, 0xF0, 0x3F, 0x3F, 0x81, 0x7E, 0xFE, 0x67, 0xEF, 0xCF, 0xE0, 0x27, 0xEF, 0xE0, 0x00, \
++  0x01, 0xF9, 0x80, 0x3F, 0x3F, 0x00, 0x7E, 0x7E, 0x67, 0xCF, 0xCF, 0xE0, 0x07, 0xEE, 0x00, 0x00, \
++  0x01, 0xF8, 0x00, 0x3F, 0x30, 0x00, 0x7E, 0x7F, 0x6F, 0xCF, 0xCC, 0x00, 0x07, 0xEE, 0x00, 0x00, \
++  0x01, 0xFF, 0xE0, 0x3F, 0x30, 0x00, 0x7E, 0x7F, 0x0F, 0xCF, 0xCC, 0x00, 0x07, 0xEE, 0x00, 0x00, \
++  0x01, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x7E, 0x3F, 0x8F, 0x8F, 0xCC, 0x00, 0x07, 0xEE, 0x00, 0x00, \
++  0x01, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x7E, 0x3F, 0x9F, 0x8F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xC0, \
++  0x01, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x7E, 0x9F, 0x9F, 0x8F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xC8, \
++  0x01, 0xFF, 0xFF, 0xFF, 0x30, 0x00, 0x7E, 0x9F, 0xFF, 0x0F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
++  0x01, 0xF8, 0x00, 0x3F, 0x30, 0x00, 0x7E, 0xDF, 0xFF, 0x6F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
++  0x01, 0xF9, 0xFF, 0x3F, 0x30, 0x00, 0x7E, 0xCF, 0xFE, 0x6F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
++  0x01, 0xF9, 0xFF, 0x3F, 0x30, 0x00, 0x7E, 0xEF, 0xFE, 0x6F, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
++  0x01, 0xF9, 0xFF, 0x3F, 0x30, 0x00, 0x7E, 0xE7, 0xFE, 0xEF, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
++  0x01, 0xF9, 0xFF, 0x3F, 0x30, 0x00, 0x7E, 0xE7, 0xFC, 0xEF, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
++  0x01, 0xF9, 0x80, 0x3F, 0x30, 0x00, 0x7E, 0x07, 0xFC, 0xCF, 0xCC, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
++  0x01, 0xF8, 0x00, 0x3F, 0x00, 0x00, 0x7E, 0x03, 0xFC, 0x0F, 0xC0, 0x00, 0x07, 0xEE, 0x0F, 0xCC, \
++  0x01, 0xF8, 0x00, 0x7F, 0xF8, 0x07, 0xFF, 0xC3, 0xF8, 0x7F, 0xFE, 0x00, 0x0F, 0xE0, 0x0F, 0xCC, \
++  0x01, 0xFF, 0x03, 0xFF, 0xF8, 0x07, 0xFF, 0xCB, 0xFA, 0x7F, 0xFE, 0x00, 0xFF, 0xF8, 0x0F, 0xCC, \
++  0x3F, 0xFF, 0x83, 0xFF, 0xFB, 0x07, 0xFF, 0xC9, 0xFA, 0x7F, 0xFE, 0x40, 0xFF, 0xFF, 0xFF, 0xCC, \
++  0x3F, 0xFF, 0xB3, 0xFF, 0xFB, 0x87, 0xFF, 0xCD, 0xF2, 0x7F, 0xFE, 0x60, 0xFF, 0xFF, 0xFF, 0xCC, \
++  0x3F, 0xFF, 0xBB, 0xFF, 0xFB, 0x87, 0xFF, 0xCC, 0x76, 0x7F, 0xFE, 0x60, 0xFF, 0xFF, 0xFF, 0xCC, \
++  0x3F, 0xFF, 0xBB, 0xFF, 0x83, 0x80, 0x00, 0x0C, 0x06, 0x00, 0x00, 0x60, 0xFF, 0xFF, 0xFF, 0xCC, \
++  0x3F, 0xFF, 0x38, 0x00, 0x03, 0x83, 0xFF, 0xFC, 0x7E, 0x00, 0x00, 0x60, 0x0F, 0xFF, 0xFF, 0xCC, \
++  0x3F, 0xC0, 0x38, 0x0F, 0xFF, 0x83, 0xFF, 0xFC, 0x3E, 0x3F, 0xFF, 0xE0, 0x00, 0x3F, 0xFF, 0xCC, \
++  0x10, 0x00, 0x79, 0xFF, 0xFF, 0x81, 0xFF, 0xFC, 0x1E, 0x1F, 0xFF, 0xE0, 0x7C, 0x00, 0x0F, 0xCC, \
++  0x00, 0x1F, 0xF8, 0xFF, 0xFF, 0x80, 0xFF, 0xF0, 0x0C, 0x1F, 0xFF, 0xE0, 0x3F, 0xF0, 0x00, 0x0C, \
++  0x07, 0xFF, 0xF8, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x3F, 0xFF, 0x80, 0x0C, \
++  0x1F, 0xFF, 0xF8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFC, \
++  0x0F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFC, \
++  0x0F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFC, \
++  0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
++  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+ 
+-#endif
+\ No newline at end of file
++#endif
+diff --git a/headers/addons/analog.h b/headers/addons/analog.h
+index 5893ef3c..9d0a5c4b 100644
+--- a/headers/addons/analog.h
++++ b/headers/addons/analog.h
+@@ -128,6 +128,8 @@ typedef struct
+     float out_deadzone;
+     bool auto_calibration;
+     bool forced_circularity;
++    uint32_t joystick_center_x;
++    uint32_t joystick_center_y;
+ } adc_instance;
+ 
+ class AnalogInput : public GPAddon {
+@@ -148,4 +150,4 @@ private:
+     adc_instance adc_pairs[ADC_COUNT];
+ };
+ 
+-#endif  // _Analog_H_
+\ No newline at end of file
++#endif  // _Analog_H_
+diff --git a/headers/addons/he_trigger.h b/headers/addons/he_trigger.h
+index 851edc10..cc37bcc3 100644
+--- a/headers/addons/he_trigger.h
++++ b/headers/addons/he_trigger.h
+@@ -39,6 +39,14 @@
+ #define HETRIGGER_ADC3 -1
+ #endif
+ 
++#ifndef HETRIGGER_SMOOTHING_ENABLED
++#define HETRIGGER_SMOOTHING_ENABLED 1
++#endif
++
++#ifndef HETRIGGER_SMOOTHING_FACTOR
++#define HETRIGGER_SMOOTHING_FACTOR 5
++#endif
++
+ #ifndef HETRIGGER_DEFAULT_IDLE
+ #define HETRIGGER_DEFAULT_IDLE 150
+ #endif
+@@ -551,11 +559,20 @@ public:
+     virtual std::string name() { return HETriggerAddonName; }
+ private:
+     void selectChannel(uint8_t channel);
++    uint16_t emaSmoothing(uint16_t value, uint16_t previous);
+     int muxTotal;
+     int selectPins;
+     Pin_t muxPinArray[4];
+     Pin_t selectPinArray[4];
+     Pin_t lastADCSelected;
++
++    uint16_t emaSmoothingReads[32];
++    float emaSmoothingFactor;
++
++    // Used during processing
++    uint32_t mux;
++    uint32_t channel;
++    uint16_t value;
+ };
+ 
+ #endif  // _HE_Trigger_H
+\ No newline at end of file
+diff --git a/headers/buttonlayouts.h b/headers/buttonlayouts.h
+index f13ede33..c6373491 100644
+--- a/headers/buttonlayouts.h
++++ b/headers/buttonlayouts.h
+@@ -12,10 +12,14 @@
+ #define BUTTON_GROUP_TWINSTICK_B               {{GP_ELEMENT_LEVER,  {109, 37, 10, 10, 1, 0, 0}}}
+ 
+ #define BUTTON_GROUP_STICKLESS {\
+-    {GP_ELEMENT_DIR_BUTTON, {8,  20, 8, 8, 1, 1, GAMEPAD_MASK_LEFT,    GP_SHAPE_ELLIPSE}},\
+-    {GP_ELEMENT_DIR_BUTTON, {26, 20, 8, 8, 1, 1, GAMEPAD_MASK_DOWN,    GP_SHAPE_ELLIPSE}},\
+-    {GP_ELEMENT_DIR_BUTTON, {41, 29, 8, 8, 1, 1, GAMEPAD_MASK_RIGHT,   GP_SHAPE_ELLIPSE}},\
+-    {GP_ELEMENT_DIR_BUTTON, {48, 53, 8, 8, 1, 1, GAMEPAD_MASK_UP,      GP_SHAPE_ELLIPSE}}\
++    {GP_ELEMENT_BTN_BUTTON, {96, 30, 12, 12, 1, 1, GAMEPAD_MASK_B4,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {79, 42, 12, 12, 1, 1, GAMEPAD_MASK_B3,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {113, 42, 12, 12, 1, 1, GAMEPAD_MASK_B2,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {96, 55, 12, 12, 1, 1, GAMEPAD_MASK_B1,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {79,  9, 15, 7, 1, 1, GAMEPAD_MASK_L1,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {109, 9, 15, 7, 1, 1, GAMEPAD_MASK_R1,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {79,  17, 15, 7, 1, 1, GAMEPAD_MASK_L2,      GP_SHAPE_ELLIPSE}},\
++    {GP_ELEMENT_BTN_BUTTON, {109, 17, 15, 7, 1, 1, GAMEPAD_MASK_R2,      GP_SHAPE_ELLIPSE}}\
+ }
+ 
+ #define BUTTON_GROUP_WASD_BOX {\
+diff --git a/headers/drivers/ps4/PS4Descriptors.h b/headers/drivers/ps4/PS4Descriptors.h
+index 66e41162..4ddb9b3b 100644
+--- a/headers/drivers/ps4/PS4Descriptors.h
++++ b/headers/drivers/ps4/PS4Descriptors.h
+@@ -419,8 +419,8 @@ typedef struct __attribute__((packed)) {
+ } PS4Report;
+ 
+ static const uint8_t ps4_string_language[]     = { 0x09, 0x04 };
+-static const uint8_t ps4_string_manufacturer[] = "Open Stick Community";
+-static const uint8_t ps4_string_product[]      = "GP2040-CE (PS4)";
++static const uint8_t ps4_string_manufacturer[] = "Sony";
++static const uint8_t ps4_string_product[]      = "Wireless Controller";
+ static const uint8_t ps4_string_version[]      = "1.0";
+ 
+ static const uint8_t *ps4_string_descriptors[] __attribute__((unused)) =
+diff --git a/proto/config.proto b/proto/config.proto
+index 1a539288..73d9b34d 100644
+--- a/proto/config.proto
++++ b/proto/config.proto
+@@ -419,6 +419,10 @@ message AnalogOptions
+     optional uint32 outer_deadzone2 = 21;
+     optional bool auto_calibrate2 = 22;
+     optional bool forced_circularity2 = 23;
++    optional uint32 joystick_center_x = 24;
++    optional uint32 joystick_center_y = 25;
++    optional uint32 joystick_center_x2 = 26;
++    optional uint32 joystick_center_y2 = 27;
+ }
+ 
+ message TurboOptions
+@@ -880,6 +884,8 @@ message HETriggerOptions
+     optional int32 muxADCPin3 = 9;
+     optional int32 muxChannels = 10;
+     repeated HETriggerInfo triggers = 11 [(nanopb).max_count = 32];
++    optional bool emaSmoothing = 12;
++    optional int32 smoothingFactor = 13;
+ }
+ 
+ message AddonOptions
+diff --git a/src/addons/analog.cpp b/src/addons/analog.cpp
+index 3061e20c..2c38774f 100644
+--- a/src/addons/analog.cpp
++++ b/src/addons/analog.cpp
+@@ -33,6 +33,8 @@ void AnalogInput::setup() {
+     adc_pairs[0].out_deadzone = analogOptions.outer_deadzone / 100.0f;
+     adc_pairs[0].auto_calibration = analogOptions.auto_calibrate;
+     adc_pairs[0].forced_circularity = analogOptions.forced_circularity;
++    adc_pairs[0].joystick_center_x = analogOptions.joystick_center_x;
++    adc_pairs[0].joystick_center_y = analogOptions.joystick_center_y;
+     adc_pairs[1].x_pin = analogOptions.analogAdc2PinX;
+     adc_pairs[1].y_pin = analogOptions.analogAdc2PinY;
+     adc_pairs[1].analog_invert = analogOptions.analogAdc2Invert;
+@@ -44,6 +46,8 @@ void AnalogInput::setup() {
+     adc_pairs[1].out_deadzone = analogOptions.outer_deadzone2 / 100.0f;
+     adc_pairs[1].auto_calibration = analogOptions.auto_calibrate2;
+     adc_pairs[1].forced_circularity = analogOptions.forced_circularity2;
++    adc_pairs[1].joystick_center_x = analogOptions.joystick_center_x2;
++    adc_pairs[1].joystick_center_y = analogOptions.joystick_center_y2;
+     
+ 
+     // Setup defaults and helpers
+@@ -66,6 +70,9 @@ void AnalogInput::setup() {
+             if (adc_pairs[i].auto_calibration) {
+                 adc_select_input(adc_pairs[i].x_pin - ADC_PIN_OFFSET);
+                 adc_pairs[i].x_center = adc_read();
++            } else {
++                // if auto calibration is disabled, attempt to use stored manual calibration value
++                adc_pairs[i].x_center = adc_pairs[i].joystick_center_x;
+             }
+         }
+         if(isValidPin(adc_pairs[i].y_pin)) {
+@@ -73,6 +80,9 @@ void AnalogInput::setup() {
+             if (adc_pairs[i].auto_calibration) {
+                 adc_select_input(adc_pairs[i].y_pin - ADC_PIN_OFFSET);
+                 adc_pairs[i].y_center = adc_read();
++            } else {
++                // if auto calibration is disabled, attempt to use stored manual calibration value
++                adc_pairs[i].y_center = adc_pairs[i].joystick_center_y;
+             }
+         }
+     }
+@@ -143,7 +153,9 @@ void AnalogInput::process() {
+ float AnalogInput::readPin(int stick_num, Pin_t pin_adc, uint16_t center) {
+     adc_select_input(pin_adc);
+     uint16_t adc_value = adc_read();
+-    if (adc_pairs[stick_num].auto_calibration) {
++    // Apply calibration only if auto calibration is enabled or manual calibration has been performed
++    // Manual calibration is considered performed if the center value is not 0 (default)
++    if (adc_pairs[stick_num].auto_calibration || center != 0) {
+         if (adc_value > center) {
+             adc_value = map(adc_value, center, ADC_MAX, ADC_MAX / 2, ADC_MAX);
+         } else if (adc_value == center) {
+@@ -178,4 +190,4 @@ void AnalogInput::radialDeadzone(int stick_num, adc_instance & adc_inst) {
+     adc_inst.y_value = ((adc_inst.y_magnitude / adc_inst.xy_magnitude) * scaling_factor) + ANALOG_CENTER;
+     adc_inst.x_value = std::clamp(adc_inst.x_value, ANALOG_MINIMUM, ANALOG_MAX);
+     adc_inst.y_value = std::clamp(adc_inst.y_value, ANALOG_MINIMUM, ANALOG_MAX);
+-}
+\ No newline at end of file
++}
+diff --git a/src/addons/he_trigger.cpp b/src/addons/he_trigger.cpp
+index 3d66987b..733287bc 100644
+--- a/src/addons/he_trigger.cpp
++++ b/src/addons/he_trigger.cpp
+@@ -3,6 +3,8 @@
+ 
+ #include "hardware/adc.h"
+ 
++#define ADC_MAX ((1 << 12) - 1) // 4095
++
+ bool HETriggerAddon::available() {
+     return Storage::getInstance().getAddonOptions().heTriggerOptions.enabled;
+ }
+@@ -54,6 +56,25 @@ void HETriggerAddon::setup() {
+     }
+ 
+     lastADCSelected = -1;
++
++    if ( options.emaSmoothing == 1 ) {
++        // Read all ADC values once
++        for(int i = 0; i < 32; i++) {
++            // Ignore triggers with no actions
++            if (options.triggers[i].action == -10 )
++                continue;
++            mux = (i / options.muxChannels);
++            channel = (i % options.muxChannels);
++            selectChannel(channel);
++            // Only Switch ADC if we are not currently on the mux ADC
++            if ( lastADCSelected != muxPinArray[mux]) {
++                adc_select_input(muxPinArray[mux]-26);
++                lastADCSelected = muxPinArray[mux];
++            }
++            emaSmoothingReads[i] = adc_read();
++        }
++        emaSmoothingFactor = (float)options.smoothingFactor / 100.f; // 99 = max smoothing factor
++    }
+ }
+ 
+ void HETriggerAddon::selectChannel(uint8_t channel) {
+@@ -64,12 +85,15 @@ void HETriggerAddon::selectChannel(uint8_t channel) {
+     }
+ }
+ 
++uint16_t HETriggerAddon::emaSmoothing(uint16_t value, uint16_t previous) {
++    float ema_value = (float)value / ADC_MAX;
++    float ema_previous = (float)previous / ADC_MAX;
++    return ((emaSmoothingFactor*ema_value) + ((1.0f-emaSmoothingFactor) * ema_previous)) * ADC_MAX;
++}
++
+ void HETriggerAddon::preprocess() {
+     Gamepad * gamepad = Storage::getInstance().GetGamepad();
+     HETriggerOptions & options = Storage::getInstance().getAddonOptions().heTriggerOptions;
+-    uint32_t mux;
+-    uint32_t channel;
+-    uint16_t value;
+     for (uint8_t he = 0; he < 32; he++) {
+         // Ignore triggers with no actions
+         if (options.triggers[he].action == -10 )
+@@ -83,6 +107,13 @@ void HETriggerAddon::preprocess() {
+             lastADCSelected = muxPinArray[mux];
+         }
+         value = adc_read();
++
++        // EMA Smoothing
++        if ( options.emaSmoothing == 1 ) {
++            value = emaSmoothing(value, emaSmoothingReads[he]);
++            emaSmoothingReads[he] = value;
++        }
++
+         if (value >= options.triggers[he].active) {
+             switch (options.triggers[he].action) {
+                 case GpioAction::BUTTON_PRESS_UP: gamepad->state.dpad |= GAMEPAD_MASK_UP; break;
+diff --git a/src/config_utils.cpp b/src/config_utils.cpp
+index 19d6f2b7..478a6b21 100644
+--- a/src/config_utils.cpp
++++ b/src/config_utils.cpp
+@@ -816,6 +816,8 @@ void ConfigUtils::initUnsetPropertiesWithDefaults(Config& config)
+     INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions, muxADCPin2, HETRIGGER_ADC2);
+     INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions, muxADCPin3, HETRIGGER_ADC3);
+     INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions, muxChannels, HETRIGGER_MUX_CHANNELS);
++    INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions, emaSmoothing, HETRIGGER_SMOOTHING_ENABLED);
++    INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions, smoothingFactor, HETRIGGER_SMOOTHING_FACTOR);
+     INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions.triggers[0], action, HETRIGGER_HE0_ACTION);
+     INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions.triggers[0], active, HETRIGGER_HE0_ACTIVE);
+     INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions.triggers[0], idle, HETRIGGER_HE0_IDLE);
+@@ -976,7 +978,7 @@ void ConfigUtils::initUnsetPropertiesWithDefaults(Config& config)
+     INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions.triggers[31], idle, HETRIGGER_HE31_IDLE);
+     INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions.triggers[31], max, HETRIGGER_HE31_MAX);
+     INIT_UNSET_PROPERTY(config.addonOptions.heTriggerOptions.triggers[31], polarity, HETRIGGER_HE31_POLARITY);
+-    
++
+     // reminder that this must be set or else nanopb won't retain anything
+     config.addonOptions.heTriggerOptions.triggers_count = HETRIGGER_COUNT;
+ 
+diff --git a/src/webconfig.cpp b/src/webconfig.cpp
+index 691cffcd..c8a31755 100644
+--- a/src/webconfig.cpp
++++ b/src/webconfig.cpp
+@@ -1,5 +1,7 @@
+ #include "config.pb.h"
+ #include "base64.h"
++#include "hardware/adc.h"
++#include "helper.h"
+ 
+ #include "drivermanager.h"
+ #include "storagemanager.h"
+@@ -1462,6 +1464,10 @@ std::string setExpansionPins()
+ static uint32_t calibrationMuxChannels = 0;
+ static Pin_t calibrationSelectPins[4];
+ static Pin_t calibrationADCPins[4];
++static bool calibrationSmoothing = false;
++static uint32_t calibrationSmoothingFactor = 0;
++static float ema_smoothing;
++static uint32_t smoothingRead = 0;
+ 
+ // Get the HE Trigger Calibration using our manual GPIO input and everything
+ std::string setHETriggerCalibration()
+@@ -1478,6 +1484,10 @@ std::string setHETriggerCalibration()
+     calibrationADCPins[2] = doc["muxADCPin2"];
+     calibrationADCPins[3] = doc["muxADCPin3"];
+ 
++    calibrationSmoothing = doc["heTriggerSmoothing"];
++    calibrationSmoothingFactor = doc["heTriggerSmoothingFactor"];
++    ema_smoothing = (float)calibrationSmoothingFactor / 100.f; // 99 = max smoothing factor
++
+     for (int i = 0; i < 4; i++) {
+         if ( calibrationSelectPins[i] != -1 && 
+                 calibrationSelectPins[i] >= 0 && 
+@@ -1496,6 +1506,13 @@ std::string setHETriggerCalibration()
+     return serialize_json(doc);
+ }
+ 
++#define ADC_MAX ((1 << 12) - 1) // 4095
++uint16_t emaCalculation(uint16_t value, uint16_t previous) {
++    float ema_value = (float)value / ADC_MAX;
++    float ema_previous = (float)previous / ADC_MAX;
++    return ((ema_smoothing*ema_value) + ((1.0f-ema_smoothing) * ema_previous)) * ADC_MAX;
++}
++
+ // Get the HE Trigger Calibration using our manual GPIO input and everything
+ std::string getHETriggerCalibration()
+ {
+@@ -1503,7 +1520,6 @@ std::string getHETriggerCalibration()
+     uint32_t id = postDoc["targetId"];
+     const size_t capacity = JSON_OBJECT_SIZE(20);
+     DynamicJsonDocument doc(capacity);
+-
+     uint32_t adcSelectPin = 0;
+ 
+     // Mux Channels determines how many select pins we use
+@@ -1556,10 +1572,18 @@ std::string getHETriggerCalibration()
+         return serialize_json(doc);
+     }
+     adc_select_input(adcSelectPin-26);
+-    sleep_us(5);
+-    adc_read();
+-    sleep_us(2);
+-    doc["voltage"] = adc_read();
++    // Web-Config triggers getHECalibration every 50ms, game controller triggers <1ms
++    if ( calibrationSmoothing ) {
++        uint16_t read;
++        for(int i = 0; i < 50; i++) {
++            read = adc_read();
++            read = emaCalculation(read, smoothingRead);
++            smoothingRead = read;
++        }
++        doc["voltage"] = read;
++    } else {
++        doc["voltage"] = adc_read();
++    }
+     return serialize_json(doc);
+ }
+ 
+@@ -1586,7 +1610,6 @@ std::string getHETriggerOptions()
+ // Set Hall Effect Trigger Options
+ std::string setHETriggerOptions()
+ {
+-    const size_t capacity = JSON_OBJECT_SIZE(100);
+     DynamicJsonDocument doc = get_post_data();
+     HETriggerInfo * heTriggers = Storage::getInstance().getAddonOptions().heTriggerOptions.triggers;
+ 
+@@ -1663,6 +1686,10 @@ std::string setAddonOptions()
+     docToValue(analogOptions.outer_deadzone2, doc, "outer_deadzone2");
+     docToValue(analogOptions.auto_calibrate, doc, "auto_calibrate");
+     docToValue(analogOptions.auto_calibrate2, doc, "auto_calibrate2");
++    docToValue(analogOptions.joystick_center_x, doc, "joystickCenterX");
++    docToValue(analogOptions.joystick_center_y, doc, "joystickCenterY");
++    docToValue(analogOptions.joystick_center_x2, doc, "joystickCenterX2");
++    docToValue(analogOptions.joystick_center_y2, doc, "joystickCenterY2");
+     docToValue(analogOptions.analog_smoothing, doc, "analog_smoothing");
+     docToValue(analogOptions.analog_smoothing2, doc, "analog_smoothing2");
+     docToValue(analogOptions.smoothing_factor, doc, "smoothing_factor");
+@@ -1849,6 +1876,8 @@ std::string setAddonOptions()
+     docToPin(heTriggerOptions.muxADCPin1, doc, "muxADCPin1");
+     docToPin(heTriggerOptions.muxADCPin2, doc, "muxADCPin2");
+     docToPin(heTriggerOptions.muxADCPin3, doc, "muxADCPin3");
++    docToValue(heTriggerOptions.emaSmoothing, doc, "heTriggerSmoothing");
++    docToValue(heTriggerOptions.smoothingFactor, doc, "heTriggerSmoothingFactor");
+ 
+     EventManager::getInstance().triggerEvent(new GPStorageSaveEvent(true));
+ 
+@@ -2115,6 +2144,10 @@ std::string getAddonOptions()
+     writeDoc(doc, "outer_deadzone2", analogOptions.outer_deadzone2);
+     writeDoc(doc, "auto_calibrate", analogOptions.auto_calibrate);
+     writeDoc(doc, "auto_calibrate2", analogOptions.auto_calibrate2);
++    writeDoc(doc, "joystickCenterX", analogOptions.joystick_center_x);
++    writeDoc(doc, "joystickCenterY", analogOptions.joystick_center_y);
++    writeDoc(doc, "joystickCenterX2", analogOptions.joystick_center_x2);
++    writeDoc(doc, "joystickCenterY2", analogOptions.joystick_center_y2);
+     writeDoc(doc, "analog_smoothing", analogOptions.analog_smoothing);
+     writeDoc(doc, "analog_smoothing2", analogOptions.analog_smoothing2);
+     writeDoc(doc, "smoothing_factor", analogOptions.smoothing_factor);
+@@ -2301,6 +2334,8 @@ std::string getAddonOptions()
+     writeDoc(doc, "muxADCPin1", cleanPin(heTriggerOptions.muxADCPin1));
+     writeDoc(doc, "muxADCPin2", cleanPin(heTriggerOptions.muxADCPin2));
+     writeDoc(doc, "muxADCPin3", cleanPin(heTriggerOptions.muxADCPin3));
++    writeDoc(doc, "heTriggerSmoothing", heTriggerOptions.emaSmoothing);
++    writeDoc(doc, "heTriggerSmoothingFactor", heTriggerOptions.smoothingFactor);
+ 
+     return serialize_json(doc);
+ }
+@@ -2544,6 +2579,94 @@ std::string reboot() {
+     return serialize_json(doc);
+ }
+ 
++// NEW API: return current raw ADC reading for the configured analog pins
++std:: string getJoystickCenter() {
++    const size_t capacity = JSON_OBJECT_SIZE(10);
++    DynamicJsonDocument doc(capacity);
++    const AnalogOptions& analogOptions = Storage::getInstance().getAddonOptions().analogOptions;
++    
++    uint16_t x = 0, y = 0;
++    bool success = true;
++    std::string error_msg = "";
++    
++    // Check if analog input is enabled
++    if (!analogOptions.enabled) {
++        success = false;
++        error_msg = "Analog input is not enabled";
++    } else {
++        // Initialize ADC if not already initialized
++        adc_init();
++        
++        // Check if specific stick is requested via query parameter
++        // For now, we'll read both sticks and return the appropriate one
++        // In a more sophisticated implementation, we could parse query parameters
++        
++        // Read first stick X/Y
++        if (isValidPin(analogOptions.analogAdc1PinX)) {
++            adc_gpio_init(analogOptions.analogAdc1PinX);
++            adc_select_input(analogOptions.analogAdc1PinX - 26);
++            x = adc_read();
++        }
++        if (isValidPin(analogOptions.analogAdc1PinY)) {
++            adc_gpio_init(analogOptions.analogAdc1PinY);
++            adc_select_input(analogOptions.analogAdc1PinY - 26);
++            y = adc_read();
++        }
++    }
++    
++    JsonObject o = doc.to<JsonObject>();
++    o["success"] = success;
++    if (!success) {
++        o["error"] = error_msg;
++    } else {
++        o["x"] = x;
++        o["y"] = y;
++    }
++    return serialize_json(doc);
++}
++
++// NEW API: return current raw ADC reading for stick 2
++std:: string getJoystickCenter2() {
++    const size_t capacity = JSON_OBJECT_SIZE(10);
++    DynamicJsonDocument doc(capacity);
++    const AnalogOptions& analogOptions = Storage::getInstance().getAddonOptions().analogOptions;
++    
++    uint16_t x = 0, y = 0;
++    bool success = true;
++    std::string error_msg = "";
++    
++    // Check if analog input is enabled
++    if (!analogOptions.enabled) {
++        success = false;
++        error_msg = "Analog input is not enabled";
++    } else {
++        // Initialize ADC if not already initialized
++        adc_init();
++        
++        // Read second stick X/Y
++        if (isValidPin(analogOptions.analogAdc2PinX)) {
++            adc_gpio_init(analogOptions.analogAdc2PinX);
++            adc_select_input(analogOptions.analogAdc2PinX - 26);
++            x = adc_read();
++        }
++        if (isValidPin(analogOptions.analogAdc2PinY)) {
++            adc_gpio_init(analogOptions.analogAdc2PinY);
++            adc_select_input(analogOptions.analogAdc2PinY - 26);
++            y = adc_read();
++        }
++    }
++    
++    JsonObject o = doc.to<JsonObject>();
++    o["success"] = success;
++    if (!success) {
++        o["error"] = error_msg;
++    } else {
++        o["x"] = x;
++        o["y"] = y;
++    }
++    return serialize_json(doc);
++}
++
+ typedef std::string (*HandlerFuncPtr)();
+ static const std::pair<const char*, HandlerFuncPtr> handlerFuncs[] =
+ {
+@@ -2592,6 +2715,8 @@ static const std::pair<const char*, HandlerFuncPtr> handlerFuncs[] =
+     { "/api/abortGetHeldPins", abortGetHeldPins },
+     { "/api/getUsedPins", getUsedPins },
+     { "/api/getConfig", getConfig },
++    { "/api/getJoystickCenter", getJoystickCenter },
++    { "/api/getJoystickCenter2", getJoystickCenter2 },
+ #if !defined(NDEBUG)
+     { "/api/echo", echo },
+ #endif
+diff --git a/www/server/app.js b/www/server/app.js
+index 2cb25972..d9bb19ff 100644
+--- a/www/server/app.js
++++ b/www/server/app.js
+@@ -562,6 +562,8 @@ app.get('/api/getAddonsOptions', (req, res) => {
+ 		muxSelectPin1: 1,
+ 		muxSelectPin2: 2,
+ 		muxSelectPin3: -1,
++		heTriggerSmoothing: 0,
++		heTriggerSmoothingFactor: 5,
+ 		RotaryAddonEnabled: 1,
+ 		PCF8575AddonEnabled: 1,
+ 		DRV8833RumbleAddonEnabled: 1,
+diff --git a/www/src/Addons/Analog.tsx b/www/src/Addons/Analog.tsx
+index c2431dc8..8e52a59e 100644
+--- a/www/src/Addons/Analog.tsx
++++ b/www/src/Addons/Analog.tsx
+@@ -1,4 +1,4 @@
+-import { useContext } from 'react';
++import { useContext, useState } from 'react';
+ import { useTranslation } from 'react-i18next';
+ import { FormCheck, Row, Tab, Tabs } from 'react-bootstrap';
+ import * as yup from 'yup';
+@@ -133,6 +133,22 @@ export const analogScheme = {
+ 		.number()
+ 		.label('Error Rate 2')
+ 		.validateSelectionWhenValue('AnalogInputEnabled', ANALOG_ERROR_RATES),
++	joystickCenterX: yup
++		.number()
++		.label('Joystick Center X')
++		.validateRangeWhenValue('AnalogInputEnabled', 0, 4095),
++	joystickCenterY: yup
++		.number()
++		.label('Joystick Center Y')
++		.validateRangeWhenValue('AnalogInputEnabled', 0, 4095),
++	joystickCenterX2: yup
++		.number()
++		.label('Joystick Center X2')
++		.validateRangeWhenValue('AnalogInputEnabled', 0, 4095),
++	joystickCenterY2: yup
++		.number()
++		.label('Joystick Center Y2')
++		.validateRangeWhenValue('AnalogInputEnabled', 0, 4095),
+ };
+ 
+ export const analogState = {
+@@ -153,6 +169,10 @@ export const analogState = {
+ 	outer_deadzone2: 95,
+ 	auto_calibrate: 0,
+ 	auto_calibrate2: 0,
++	joystickCenterX: 0,
++	joystickCenterY: 0,
++	joystickCenterX2: 0,
++	joystickCenterY2: 0,
+ 	analog_smoothing: 0,
+ 	analog_smoothing2: 0,
+ 	smoothing_factor: 5,
+@@ -161,7 +181,7 @@ export const analogState = {
+ 	analog_error2: 1,
+ };
+ 
+-const Analog = ({ values, errors, handleChange, handleCheckbox }: AddonPropTypes) => {
++const Analog = ({ values, errors, handleChange, handleCheckbox, setFieldValue }: AddonPropTypes) => {
+ 	const { usedPins } = useContext(AppContext);
+ 	const { t } = useTranslation();
+ 	const availableAnalogPins = ANALOG_PINS.filter(
+@@ -346,18 +366,133 @@ const Analog = ({ values, errors, handleChange, handleCheckbox }: AddonPropTypes
+ 										))}
+ 									</FormSelect>
+ 								</Row>
+-								<FormCheck
+-									label={t('AddonsConfig:analog-auto-calibrate')}
+-									type="switch"
+-									id="Auto_calibrate"
+-									className="col-sm-3 ms-3"
+-									isInvalid={false}
+-									checked={Boolean(values.auto_calibrate)}
+-									onChange={(e) => {
+-										handleCheckbox('auto_calibrate');
+-										handleChange(e);
+-									}}
+-								/>
++								<div className="d-flex align-items-center">
++									<FormCheck
++										label={t('AddonsConfig:analog-auto-calibrate')}
++										type="switch"
++										id="Auto_calibrate"
++										className="col-sm-3 ms-3"
++										isInvalid={false}
++										checked={Boolean(values.auto_calibrate)}
++										onChange={(e) => {
++											handleCheckbox('auto_calibrate');
++											handleChange(e);
++										}}
++									/>
++									<button
++										type="button"
++										className="btn btn-sm btn-outline-secondary ms-2"
++										disabled={Boolean(values.auto_calibrate)}
++										onClick={async () => {
++											try {
++												// 多步骤校准流程
++												const steps = [
++													{ direction: '左上', position: 'top-left' },
++													{ direction: '右上', position: 'top-right' },
++													{ direction: '左下', position: 'bottom-left' },
++													{ direction: '右下', position: 'bottom-right' }
++												];
++												
++												const calibrationValues = [];
++												
++												for (let i = 0; i < steps.length; i++) {
++													const step = steps[i];
++													const stepNumber = i + 1;
++													
++													// 显示提示框
++													const userConfirmed = confirm(
++														`校准步骤 ${stepNumber}/4\n\n` +
++														`请将摇杆1拨动到${step.direction}位置，然后松开让其回中\n\n` +
++														`确认摇杆1已回中后，点击"确定"记录中心值${stepNumber}`
++													);
++													
++													if (!userConfirmed) {
++														alert('校准已取消');
++														return;
++													}
++													
++													// 读取当前中心值
++													console.log(`Fetching joystick 1 center for step ${stepNumber}...`);
++													const res = await fetch('/api/getJoystickCenter');
++													console.log('Response status:', res.status);
++													
++													if (!res.ok) {
++														throw new Error(`HTTP error! status: ${res.status}`);
++													}
++													
++													const data = await res.json();
++													console.log('Response data:', data);
++													
++													if (!data.success || data.error) {
++														alert(`校准失败: ${data.error || 'Unknown error'}`);
++														console.error('API Error:', data.error);
++														return;
++													}
++													
++													calibrationValues.push({
++														step: stepNumber,
++														direction: step.direction,
++														x: data.x || 0,
++														y: data.y || 0
++													});
++													
++													console.log(`Step ${stepNumber} completed:`, calibrationValues[i]);
++												}
++												
++												// 计算四个点的中心值
++												const avgX = Math.round(calibrationValues.reduce((sum, val) => sum + val.x, 0) / 4);
++												const avgY = Math.round(calibrationValues.reduce((sum, val) => sum + val.y, 0) / 4);
++												
++												// 更新摇杆1的中心值
++												setFieldValue('joystickCenterX', avgX);
++												setFieldValue('joystickCenterY', avgY);
++												
++												console.log('Calibration completed:', {
++													values: calibrationValues,
++													finalCenter: { x: avgX, y: avgY }
++												});
++												
++												// 显示成功提示
++												alert(
++													`摇杆1校准成功！\n\n` +
++													`校准数据：\n` +
++													`• 左上: X=${calibrationValues[0].x}, Y=${calibrationValues[0].y}\n` +
++													`• 右上: X=${calibrationValues[1].x}, Y=${calibrationValues[1].y}\n` +
++													`• 左下: X=${calibrationValues[2].x}, Y=${calibrationValues[2].y}\n` +
++													`• 右下: X=${calibrationValues[3].x}, Y=${calibrationValues[3].y}\n\n` +
++													`最终中心值: X=${avgX}, Y=${avgY}\n\n` +
++													`请保存配置以应用校准值。`
++												);
++											} catch (err) {
++												console.error('Failed to calibrate joystick 1', err);
++												alert('摇杆1校准失败: ' + (err instanceof Error ? err.message : String(err)));
++											}
++										}}
++									>
++										{t('AddonsConfig:analog-calibrate-button') || 'Calibrate Stick 1'}
++									</button>
++									<div className="ms-3 small text-muted">
++										{`Center: X=${values.joystickCenterX}, Y=${values.joystickCenterY}`}
++									</div>
++								</div>
++								{Boolean(values.auto_calibrate) && (
++									<div className="alert alert-info mt-2 mb-3">
++										<small>
++											<strong>摇杆1自动校准已启用：</strong> 系统会在开机时自动读取摇杆1中心值。如需手动校准，请先取消勾选"自动校准"。
++										</small>
++									</div>
++								)}
++								{!Boolean(values.auto_calibrate) && (
++									<div className="alert alert-warning mt-2 mb-3">
++										<small>
++											<strong>摇杆1手动校准模式：</strong> 
++											<br />• 点击"校准"按钮开始多步骤校准流程
++											<br />• 按提示将摇杆拨动到四个方向并回中
++											<br />• 系统将自动计算最佳中心值
++											<br />• 保存配置后重启设备以应用校准
++										</small>
++									</div>
++								)}
+ 							</Row>
+ 						</Tab>
+ 						<Tab
+@@ -512,18 +647,133 @@ const Analog = ({ values, errors, handleChange, handleCheckbox }: AddonPropTypes
+ 										))}
+ 									</FormSelect>
+ 								</Row>
+-								<FormCheck
+-									label={t('AddonsConfig:analog-auto-calibrate')}
+-									type="switch"
+-									id="Auto_calibrate2"
+-									className="col-sm-3 ms-3"
+-									isInvalid={false}
+-									checked={Boolean(values.auto_calibrate2)}
+-									onChange={(e) => {
+-										handleCheckbox('auto_calibrate2');
+-										handleChange(e);
+-									}}
+-								/>
++								<div className="d-flex align-items-center">
++									<FormCheck
++										label={t('AddonsConfig:analog-auto-calibrate')}
++										type="switch"
++										id="Auto_calibrate2"
++										className="col-sm-3 ms-3"
++										isInvalid={false}
++										checked={Boolean(values.auto_calibrate2)}
++										onChange={(e) => {
++											handleCheckbox('auto_calibrate2');
++											handleChange(e);
++										}}
++									/>
++									<button
++										type="button"
++										className="btn btn-sm btn-outline-secondary ms-2"
++										disabled={Boolean(values.auto_calibrate2)}
++										onClick={async () => {
++											try {
++												// 多步骤校准流程
++												const steps = [
++													{ direction: '左上', position: 'top-left' },
++													{ direction: '右上', position: 'top-right' },
++													{ direction: '左下', position: 'bottom-left' },
++													{ direction: '右下', position: 'bottom-right' }
++												];
++												
++												const calibrationValues = [];
++												
++												for (let i = 0; i < steps.length; i++) {
++													const step = steps[i];
++													const stepNumber = i + 1;
++													
++													// 显示提示框
++													const userConfirmed = confirm(
++														`校准步骤 ${stepNumber}/4\n\n` +
++														`请将摇杆2拨动到${step.direction}位置，然后松开让其回中\n\n` +
++														`确认摇杆2已回中后，点击"确定"记录中心值${stepNumber}`
++													);
++													
++													if (!userConfirmed) {
++														alert('校准已取消');
++														return;
++													}
++													
++													// 读取当前中心值
++													console.log(`Fetching joystick 2 center for step ${stepNumber}...`);
++													const res = await fetch('/api/getJoystickCenter2');
++													console.log('Response status:', res.status);
++													
++													if (!res.ok) {
++														throw new Error(`HTTP error! status: ${res.status}`);
++													}
++													
++													const data = await res.json();
++													console.log('Response data:', data);
++													
++													if (!data.success || data.error) {
++														alert(`校准失败: ${data.error || 'Unknown error'}`);
++														console.error('API Error:', data.error);
++														return;
++													}
++													
++													calibrationValues.push({
++														step: stepNumber,
++														direction: step.direction,
++														x: data.x || 0,
++														y: data.y || 0
++													});
++													
++													console.log(`Step ${stepNumber} completed:`, calibrationValues[i]);
++												}
++												
++												// 计算四个点的中心值
++												const avgX = Math.round(calibrationValues.reduce((sum, val) => sum + val.x, 0) / 4);
++												const avgY = Math.round(calibrationValues.reduce((sum, val) => sum + val.y, 0) / 4);
++												
++												// 更新摇杆2的中心值
++												setFieldValue('joystickCenterX2', avgX);
++												setFieldValue('joystickCenterY2', avgY);
++												
++												console.log('Calibration completed:', {
++													values: calibrationValues,
++													finalCenter: { x: avgX, y: avgY }
++												});
++												
++												// 显示成功提示
++												alert(
++													`摇杆2校准成功！\n\n` +
++													`校准数据：\n` +
++													`• 左上: X=${calibrationValues[0].x}, Y=${calibrationValues[0].y}\n` +
++													`• 右上: X=${calibrationValues[1].x}, Y=${calibrationValues[1].y}\n` +
++													`• 左下: X=${calibrationValues[2].x}, Y=${calibrationValues[2].y}\n` +
++													`• 右下: X=${calibrationValues[3].x}, Y=${calibrationValues[3].y}\n\n` +
++													`最终中心值: X=${avgX}, Y=${avgY}\n\n` +
++													`请保存配置以应用校准值。`
++												);
++											} catch (err) {
++												console.error('Failed to calibrate joystick 2', err);
++												alert('摇杆2校准失败: ' + (err instanceof Error ? err.message : String(err)));
++											}
++										}}
++									>
++										{t('AddonsConfig:analog-calibrate-button') || 'Calibrate Stick 2'}
++									</button>
++									<div className="ms-3 small text-muted">
++										{`Center: X=${values.joystickCenterX2}, Y=${values.joystickCenterY2}`}
++									</div>
++								</div>
++								{Boolean(values.auto_calibrate2) && (
++									<div className="alert alert-info mt-2 mb-3">
++										<small>
++											<strong>摇杆2自动校准已启用：</strong> 系统会在开机时自动读取摇杆2中心值。如需手动校准，请先取消勾选"自动校准"。
++										</small>
++									</div>
++								)}
++								{!Boolean(values.auto_calibrate2) && (
++									<div className="alert alert-warning mt-2 mb-3">
++										<small>
++											<strong>摇杆2手动校准模式：</strong> 
++											<br />• 点击"校准"按钮开始多步骤校准流程
++											<br />• 按提示将摇杆拨动到四个方向并回中
++											<br />• 系统将自动计算最佳中心值
++											<br />• 保存配置后重启设备以应用校准
++										</small>
++									</div>
++								)}
+ 							</Row>
+ 						</Tab>
+ 					</Tabs>
+diff --git a/www/src/Addons/HETrigger.tsx b/www/src/Addons/HETrigger.tsx
+index 29e3a59f..d9577d59 100644
+--- a/www/src/Addons/HETrigger.tsx
++++ b/www/src/Addons/HETrigger.tsx
+@@ -1,6 +1,8 @@
+ import { useContext, useEffect, useState } from 'react';
+ import { Alert, Button, FormCheck, Row, Table } from 'react-bootstrap';
+ 
++import { FormikErrors } from 'formik';
++
+ import { useTranslation } from 'react-i18next';
+ import * as yup from 'yup';
+ import invert from 'lodash/invert';
+@@ -46,7 +48,51 @@ const isSelectable = (value) =>
+ 	SELECTABLE_BUTTON_ACTIONS.includes(value);
+ 
+ export const HETriggerScheme = {
+-	HETriggerEnabled: yup.number().required().label('Hall Effect Triggers Enabled')
++	HETriggerEnabled: yup.number().required().label('Hall Effect Triggers Enabled'),
++	muxChannels: yup
++		.number()
++		.label('Multiplexer Channels')
++		.validateRangeWhenValue('HETriggerEnabled', 0, 16),
++	muxADCPin0: yup
++		.number()
++		.label('Multiplexer ADC 0 Pin')
++		.validatePinWhenValue('HETriggerEnabled'),
++	muxADCPin1: yup
++		.number()
++		.label('Multiplexer ADC 1 Pin')
++		.validatePinWhenValue('HETriggerEnabled'),
++	muxADCPin2: yup
++		.number()
++		.label('Multiplexer ADC 2 Pin')
++		.validatePinWhenValue('HETriggerEnabled'),
++	muxADCPin3: yup
++		.number()
++		.label('Multiplexer ADC 3 Pin')
++		.validatePinWhenValue('HETriggerEnabled'),
++	muxSelectPin0: yup
++		.number()
++		.label('Multiplexer Select 0 Pin')
++		.validatePinWhenValue('HETriggerEnabled'),
++	muxSelectPin1: yup
++		.number()
++		.label('Multiplexer Select 1 Pin')
++		.validatePinWhenValue('HETriggerEnabled'),
++	muxSelectPin2: yup
++		.number()
++		.label('Multiplexer Select 2 Pin')
++		.validatePinWhenValue('HETriggerEnabled'),
++	muxSelectPin3: yup
++		.number()
++		.label('Multiplexer Select 3 Pin')
++		.validatePinWhenValue('HETriggerEnabled'),
++	heTriggerSmoothing: yup
++		.number()
++		.label('EMA Smoothing')
++		.validateRangeWhenValue('HETriggerEnabled', 0, 1),
++	heTriggerSmoothingFactor: yup
++		.number()
++		.label('EMA Smoothing Factor')
++		.validateRangeWhenValue('HETriggerEnabled', 1, 99),
+ };
+ 
+ export const HETriggerState = {
+@@ -60,6 +106,8 @@ export const HETriggerState = {
+ 	muxSelectPin1: 1,
+ 	muxSelectPin2: 2,
+ 	muxSelectPin3: -1,
++	heTriggerSmoothing: 0,
++	heTriggerSmoothingFactor: 5,
+ };
+ 
+ const options = Object.entries(BUTTON_ACTIONS)
+@@ -72,16 +120,23 @@ const options = Object.entries(BUTTON_ACTIONS)
+ type TriggerActionsFormTypes = {
+ 	triggers: Trigger[];
+ 	values: typeof DEFAULT_VALUES;
++	errors: FormikErrors<typeof DEFAULT_VALUES>;
+ 	muxChannels: number;
+ 	handleChange: (
+ 		e: Event,
+ 	) => void;
++	handleCheckbox: (
++		e: Event,
++	) => void;
+ };
+ 
+ const TriggerActionsForm = ({
+ 	triggers,
+ 	values,
++	errors,
+ 	muxChannels,
++	handleChange,
++	handleCheckbox
+ }: TriggerActionsFormTypes) => {
+ 	const setHETrigger = useHETriggerStore((state) => state.setHETrigger);
+ 	const saveHETriggers = useHETriggerStore((state) => state.saveHETriggers);
+@@ -307,7 +362,7 @@ const HETrigger = ({ values, errors, handleChange, handleCheckbox }: AddonPropTy
+ 						pins: availableAnalogPins.join(', '),
+ 					})}
+ 				</div>
+-				<div className="mt-2">
++				<Row className="mt-2">
+ 					<FormSelect
+ 						label={t('HETrigger:multiplexer-channel-select')}
+ 						name="muxChannels"
+@@ -324,8 +379,8 @@ const HETrigger = ({ values, errors, handleChange, handleCheckbox }: AddonPropTy
+ 							</option>
+ 						))}
+ 					</FormSelect>
+-				</div>
+-				<div className="mb-3 row">
++				</Row>
++				<Row className="mb-3">
+ 					<FormControl
+ 						type="number"
+ 						label={t('HETrigger:select-pin-0')}
+@@ -382,8 +437,8 @@ const HETrigger = ({ values, errors, handleChange, handleCheckbox }: AddonPropTy
+ 						min={-1}
+ 						max={29}
+ 					/>
+-				</div>
+-				<div className="mb-3 row">
++				</Row>
++				<Row className="mb-3">
+ 					<FormSelect
+ 						label={t('HETrigger:adc-pin-0')}
+ 						name='muxADCPin0'
+@@ -434,13 +489,43 @@ const HETrigger = ({ values, errors, handleChange, handleCheckbox }: AddonPropTy
+ 					>
+ 						<AnalogPinOptions />
+ 					</FormSelect>
+-				</div>
++				</Row>
++				<Row className="mb-3">
++					<FormCheck
++						label={t('AddonsConfig:analog-smoothing')}
++						type="switch"
++						id="TriggerSmoothingAddonButton"
++						className="col-sm-3 mt-auto mb-auto ms-3"
++						isInvalid={false}
++						checked={Boolean(values.heTriggerSmoothing)}
++						onChange={(e) => {
++							handleCheckbox('heTriggerSmoothing');
++							handleChange(e);
++						}}
++					/>
++					<FormControl
++						hidden={!values.heTriggerSmoothing}
++						type="number"
++						label={t('AddonsConfig:smoothing-factor')}
++						name="heTriggerSmoothingFactor"
++						className="form-control-sm"
++						groupClassName="col-sm-2 mb-3"
++						value={values.heTriggerSmoothingFactor}
++						error={errors.heTriggerSmoothingFactor}
++						isInvalid={Boolean(errors.heTriggerSmoothingFactor)}
++						onChange={handleChange}
++						min={1}
++						max={99}
++					/>
++				</Row>
+ 				<Row className="mb-2">
+ 					<TriggerActionsForm
+ 						key="triggers-actions-form"
+ 						values={values}
++						errors={errors}
+ 						triggers={triggers}
+ 						handleChange={handleChange}
++						handleCheckbox={handleCheckbox}
+ 						muxChannels={values.muxChannels}
+ 					/>
+ 				</Row>
+diff --git a/www/src/Components/HECalibration.tsx b/www/src/Components/HECalibration.tsx
+index 762e710b..3f8636b1 100644
+--- a/www/src/Components/HECalibration.tsx
++++ b/www/src/Components/HECalibration.tsx
+@@ -92,7 +92,7 @@ const HECalibration = ({
+ 				const channelNum = muxNum + Math.floor(target.current%muxChannels);
+ 				setTitle(`${actionTitle} - Mux ${muxNum} - Channel ${channelNum}`);
+ 			} else {
+-				setTitle(`${actionTitle} - Direct - ADC ${values[`muxADCPins${target.current}`]}`);
++				setTitle(`${actionTitle} - Direct - ADC ${values[`muxADCPin${target.current}` as keyof typeof values]}`);
+ 			}
+ 		}
+ 	};
+@@ -142,6 +142,8 @@ const HECalibration = ({
+ 				muxADCPin1: values['muxADCPin1'],
+ 				muxADCPin2: values['muxADCPin2'],
+ 				muxADCPin3: values['muxADCPin3'],
++				heTriggerSmoothing: values['heTriggerSmoothing'],
++				heTriggerSmoothingFactor: values['heTriggerSmoothingFactor'],
+ 			});
+ 			updateCalibrationRead(0);
+ 		}
+diff --git a/www/src/Locales/en/AddonsConfig.jsx b/www/src/Locales/en/AddonsConfig.jsx
+index feedbdc8..2e2ba3e9 100644
+--- a/www/src/Locales/en/AddonsConfig.jsx
++++ b/www/src/Locales/en/AddonsConfig.jsx
+@@ -31,6 +31,7 @@ export default {
+ 	'inner-deadzone-size': 'Inner Deadzone Size (%)',
+ 	'outer-deadzone-size': 'Outer Deadzone Size (%)',
+ 	'analog-auto-calibrate': 'Auto Calibration',
++	'analog-calibrate-button': 'Calibrate',
+ 	'analog-smoothing': 'Analog Smoothing',
+ 	'smoothing-factor': 'Smoothing Factor',
+ 	'analog-error-label': 'Error Rate',
+diff --git a/www/src/Locales/zh-CN/AddonsConfig.jsx b/www/src/Locales/zh-CN/AddonsConfig.jsx
+index bdd6be2f..88d2d7a3 100644
+--- a/www/src/Locales/zh-CN/AddonsConfig.jsx
++++ b/www/src/Locales/zh-CN/AddonsConfig.jsx
+@@ -28,6 +28,7 @@ export default {
+ 	'inner-deadzone-size': '内部死区范围 (%)',
+ 	'outer-deadzone-size': '外部死区范围 (%)',
+ 	'analog-auto-calibrate': '自动校准',
++	'analog-calibrate-button': '手动校准',
+ 	'analog-smoothing': '平滑模拟信号',
+ 	'smoothing-factor': '平滑因数',
+ 	'analog-error-label': '误差率',
+diff --git a/www/src/Locales/zh-CN/LayoutConfig.jsx b/www/src/Locales/zh-CN/LayoutConfig.jsx
+index 33320ec2..edbf909f 100644
+--- a/www/src/Locales/zh-CN/LayoutConfig.jsx
++++ b/www/src/Locales/zh-CN/LayoutConfig.jsx
+@@ -32,7 +32,7 @@ export default {
+ 			BUTTON_LAYOUT_BM_7KEY_A: 'Beatmania 7 Key Left',
+ 			BUTTON_LAYOUT_GITADORA_FRET_A: 'Gitadora Fret',
+ 			BUTTON_LAYOUT_GITADORA_STRUM_A: 'Gitadora Strum',
+-			BUTTON_LAYOUT_BOARD_DEFINED_A: 'Board Defined',
++			BUTTON_LAYOUT_BOARD_DEFINED_A: 'Bilibili-花明楼-左',
+ 			BUTTON_LAYOUT_CUSTOMA: 'Custom',
+ 			BUTTON_LAYOUT_BANDHERO_FRET_A: 'GH/RB Fret',
+ 			BUTTON_LAYOUT_BANDHERO_STRUM_A: 'GH/RB Strum',
+@@ -48,7 +48,7 @@ export default {
+ 		},
+ 		right: {
+ 			BUTTON_LAYOUT_ARCADE: 'Arcade',
+-			BUTTON_LAYOUT_STICKLESSB: 'Stickless',
++			BUTTON_LAYOUT_STICKLESSB: 'Sticklessb',
+ 			BUTTON_LAYOUT_BUTTONS_ANGLEDB: 'Buttons Angled',
+ 			BUTTON_LAYOUT_VEWLIX: 'Viewlix',
+ 			BUTTON_LAYOUT_VEWLIX7: 'Viewlix 7',
+@@ -81,7 +81,7 @@ export default {
+ 			BUTTON_LAYOUT_BM_7KEY_B: 'Beatmania 7 Key Right',
+ 			BUTTON_LAYOUT_GITADORA_FRET_B: 'Gitadora Fret',
+ 			BUTTON_LAYOUT_GITADORA_STRUM_B: 'Gitadora Strum',
+-			BUTTON_LAYOUT_BOARD_DEFINED_B: 'Board Defined',
++			BUTTON_LAYOUT_BOARD_DEFINED_B: 'Bilibili-花明楼-右',
+ 			BUTTON_LAYOUT_CUSTOMB: 'Custom',
+ 			BUTTON_LAYOUT_BANDHERO_FRET_B: 'GH/RB Fret',
+ 			BUTTON_LAYOUT_BANDHERO_STRUM_B: 'GH/RB Strum',
diff --git a/migrate_manual_calibration.sh b/migrate_manual_calibration.sh
new file mode 100644
index 00000000..958ac473
--- /dev/null
+++ b/migrate_manual_calibration.sh
@@ -0,0 +1,45 @@
+#!/bin/bash
+# 手动校准功能移植脚本
+
+echo "开始移植手动校准功能到新版本..."
+
+# 检查当前分支
+CURRENT_BRANCH=$(git branch --show-current)
+echo "当前分支: $CURRENT_BRANCH"
+
+# 创建移植分支
+NEW_BRANCH="manual-calibration-$(date +%Y%m%d)"
+git checkout -b $NEW_BRANCH
+echo "创建新分支: $NEW_BRANCH"
+
+# 应用后端修改
+echo "应用后端修改..."
+
+# 1. 修改 analog.cpp
+if [ -f "src/addons/analog.cpp" ]; then
+    echo "修改 src/addons/analog.cpp"
+    # 这里可以添加具体的修改命令
+fi
+
+# 2. 修改 webconfig.cpp  
+if [ -f "src/webconfig.cpp" ]; then
+    echo "修改 src/webconfig.cpp"
+    # 这里可以添加具体的修改命令
+fi
+
+# 应用前端修改
+echo "应用前端修改..."
+
+# 3. 修改 Analog.tsx
+if [ -f "www/src/Addons/Analog.tsx" ]; then
+    echo "修改 www/src/Addons/Analog.tsx"
+    # 这里可以添加具体的修改命令
+fi
+
+echo "移植完成！"
+echo "请测试功能是否正常工作："
+echo "1. 编译项目"
+echo "2. 测试手动校准功能"
+echo "3. 验证自动校准功能"
+echo "4. 检查配置保存/加载"
+
diff --git a/proto/config.proto b/proto/config.proto
index a2e7dcaf..73d9b34d 100644
--- a/proto/config.proto
+++ b/proto/config.proto
@@ -419,6 +419,10 @@ message AnalogOptions
     optional uint32 outer_deadzone2 = 21;
     optional bool auto_calibrate2 = 22;
     optional bool forced_circularity2 = 23;
+    optional uint32 joystick_center_x = 24;
+    optional uint32 joystick_center_y = 25;
+    optional uint32 joystick_center_x2 = 26;
+    optional uint32 joystick_center_y2 = 27;
 }
 
 message TurboOptions
diff --git a/src/addons/analog.cpp b/src/addons/analog.cpp
index 3061e20c..2c38774f 100644
--- a/src/addons/analog.cpp
+++ b/src/addons/analog.cpp
@@ -33,6 +33,8 @@ void AnalogInput::setup() {
     adc_pairs[0].out_deadzone = analogOptions.outer_deadzone / 100.0f;
     adc_pairs[0].auto_calibration = analogOptions.auto_calibrate;
     adc_pairs[0].forced_circularity = analogOptions.forced_circularity;
+    adc_pairs[0].joystick_center_x = analogOptions.joystick_center_x;
+    adc_pairs[0].joystick_center_y = analogOptions.joystick_center_y;
     adc_pairs[1].x_pin = analogOptions.analogAdc2PinX;
     adc_pairs[1].y_pin = analogOptions.analogAdc2PinY;
     adc_pairs[1].analog_invert = analogOptions.analogAdc2Invert;
@@ -44,6 +46,8 @@ void AnalogInput::setup() {
     adc_pairs[1].out_deadzone = analogOptions.outer_deadzone2 / 100.0f;
     adc_pairs[1].auto_calibration = analogOptions.auto_calibrate2;
     adc_pairs[1].forced_circularity = analogOptions.forced_circularity2;
+    adc_pairs[1].joystick_center_x = analogOptions.joystick_center_x2;
+    adc_pairs[1].joystick_center_y = analogOptions.joystick_center_y2;
     
 
     // Setup defaults and helpers
@@ -66,6 +70,9 @@ void AnalogInput::setup() {
             if (adc_pairs[i].auto_calibration) {
                 adc_select_input(adc_pairs[i].x_pin - ADC_PIN_OFFSET);
                 adc_pairs[i].x_center = adc_read();
+            } else {
+                // if auto calibration is disabled, attempt to use stored manual calibration value
+                adc_pairs[i].x_center = adc_pairs[i].joystick_center_x;
             }
         }
         if(isValidPin(adc_pairs[i].y_pin)) {
@@ -73,6 +80,9 @@ void AnalogInput::setup() {
             if (adc_pairs[i].auto_calibration) {
                 adc_select_input(adc_pairs[i].y_pin - ADC_PIN_OFFSET);
                 adc_pairs[i].y_center = adc_read();
+            } else {
+                // if auto calibration is disabled, attempt to use stored manual calibration value
+                adc_pairs[i].y_center = adc_pairs[i].joystick_center_y;
             }
         }
     }
@@ -143,7 +153,9 @@ void AnalogInput::process() {
 float AnalogInput::readPin(int stick_num, Pin_t pin_adc, uint16_t center) {
     adc_select_input(pin_adc);
     uint16_t adc_value = adc_read();
-    if (adc_pairs[stick_num].auto_calibration) {
+    // Apply calibration only if auto calibration is enabled or manual calibration has been performed
+    // Manual calibration is considered performed if the center value is not 0 (default)
+    if (adc_pairs[stick_num].auto_calibration || center != 0) {
         if (adc_value > center) {
             adc_value = map(adc_value, center, ADC_MAX, ADC_MAX / 2, ADC_MAX);
         } else if (adc_value == center) {
@@ -178,4 +190,4 @@ void AnalogInput::radialDeadzone(int stick_num, adc_instance & adc_inst) {
     adc_inst.y_value = ((adc_inst.y_magnitude / adc_inst.xy_magnitude) * scaling_factor) + ANALOG_CENTER;
     adc_inst.x_value = std::clamp(adc_inst.x_value, ANALOG_MINIMUM, ANALOG_MAX);
     adc_inst.y_value = std::clamp(adc_inst.y_value, ANALOG_MINIMUM, ANALOG_MAX);
-}
\ No newline at end of file
+}
diff --git a/src/webconfig.cpp b/src/webconfig.cpp
index d59cb1ac..c8a31755 100644
--- a/src/webconfig.cpp
+++ b/src/webconfig.cpp
@@ -1,5 +1,7 @@
 #include "config.pb.h"
 #include "base64.h"
+#include "hardware/adc.h"
+#include "helper.h"
 
 #include "drivermanager.h"
 #include "storagemanager.h"
@@ -1684,6 +1686,10 @@ std::string setAddonOptions()
     docToValue(analogOptions.outer_deadzone2, doc, "outer_deadzone2");
     docToValue(analogOptions.auto_calibrate, doc, "auto_calibrate");
     docToValue(analogOptions.auto_calibrate2, doc, "auto_calibrate2");
+    docToValue(analogOptions.joystick_center_x, doc, "joystickCenterX");
+    docToValue(analogOptions.joystick_center_y, doc, "joystickCenterY");
+    docToValue(analogOptions.joystick_center_x2, doc, "joystickCenterX2");
+    docToValue(analogOptions.joystick_center_y2, doc, "joystickCenterY2");
     docToValue(analogOptions.analog_smoothing, doc, "analog_smoothing");
     docToValue(analogOptions.analog_smoothing2, doc, "analog_smoothing2");
     docToValue(analogOptions.smoothing_factor, doc, "smoothing_factor");
@@ -2138,6 +2144,10 @@ std::string getAddonOptions()
     writeDoc(doc, "outer_deadzone2", analogOptions.outer_deadzone2);
     writeDoc(doc, "auto_calibrate", analogOptions.auto_calibrate);
     writeDoc(doc, "auto_calibrate2", analogOptions.auto_calibrate2);
+    writeDoc(doc, "joystickCenterX", analogOptions.joystick_center_x);
+    writeDoc(doc, "joystickCenterY", analogOptions.joystick_center_y);
+    writeDoc(doc, "joystickCenterX2", analogOptions.joystick_center_x2);
+    writeDoc(doc, "joystickCenterY2", analogOptions.joystick_center_y2);
     writeDoc(doc, "analog_smoothing", analogOptions.analog_smoothing);
     writeDoc(doc, "analog_smoothing2", analogOptions.analog_smoothing2);
     writeDoc(doc, "smoothing_factor", analogOptions.smoothing_factor);
@@ -2569,6 +2579,94 @@ std::string reboot() {
     return serialize_json(doc);
 }
 
+// NEW API: return current raw ADC reading for the configured analog pins
+std:: string getJoystickCenter() {
+    const size_t capacity = JSON_OBJECT_SIZE(10);
+    DynamicJsonDocument doc(capacity);
+    const AnalogOptions& analogOptions = Storage::getInstance().getAddonOptions().analogOptions;
+    
+    uint16_t x = 0, y = 0;
+    bool success = true;
+    std::string error_msg = "";
+    
+    // Check if analog input is enabled
+    if (!analogOptions.enabled) {
+        success = false;
+        error_msg = "Analog input is not enabled";
+    } else {
+        // Initialize ADC if not already initialized
+        adc_init();
+        
+        // Check if specific stick is requested via query parameter
+        // For now, we'll read both sticks and return the appropriate one
+        // In a more sophisticated implementation, we could parse query parameters
+        
+        // Read first stick X/Y
+        if (isValidPin(analogOptions.analogAdc1PinX)) {
+            adc_gpio_init(analogOptions.analogAdc1PinX);
+            adc_select_input(analogOptions.analogAdc1PinX - 26);
+            x = adc_read();
+        }
+        if (isValidPin(analogOptions.analogAdc1PinY)) {
+            adc_gpio_init(analogOptions.analogAdc1PinY);
+            adc_select_input(analogOptions.analogAdc1PinY - 26);
+            y = adc_read();
+        }
+    }
+    
+    JsonObject o = doc.to<JsonObject>();
+    o["success"] = success;
+    if (!success) {
+        o["error"] = error_msg;
+    } else {
+        o["x"] = x;
+        o["y"] = y;
+    }
+    return serialize_json(doc);
+}
+
+// NEW API: return current raw ADC reading for stick 2
+std:: string getJoystickCenter2() {
+    const size_t capacity = JSON_OBJECT_SIZE(10);
+    DynamicJsonDocument doc(capacity);
+    const AnalogOptions& analogOptions = Storage::getInstance().getAddonOptions().analogOptions;
+    
+    uint16_t x = 0, y = 0;
+    bool success = true;
+    std::string error_msg = "";
+    
+    // Check if analog input is enabled
+    if (!analogOptions.enabled) {
+        success = false;
+        error_msg = "Analog input is not enabled";
+    } else {
+        // Initialize ADC if not already initialized
+        adc_init();
+        
+        // Read second stick X/Y
+        if (isValidPin(analogOptions.analogAdc2PinX)) {
+            adc_gpio_init(analogOptions.analogAdc2PinX);
+            adc_select_input(analogOptions.analogAdc2PinX - 26);
+            x = adc_read();
+        }
+        if (isValidPin(analogOptions.analogAdc2PinY)) {
+            adc_gpio_init(analogOptions.analogAdc2PinY);
+            adc_select_input(analogOptions.analogAdc2PinY - 26);
+            y = adc_read();
+        }
+    }
+    
+    JsonObject o = doc.to<JsonObject>();
+    o["success"] = success;
+    if (!success) {
+        o["error"] = error_msg;
+    } else {
+        o["x"] = x;
+        o["y"] = y;
+    }
+    return serialize_json(doc);
+}
+
 typedef std::string (*HandlerFuncPtr)();
 static const std::pair<const char*, HandlerFuncPtr> handlerFuncs[] =
 {
@@ -2617,6 +2715,8 @@ static const std::pair<const char*, HandlerFuncPtr> handlerFuncs[] =
     { "/api/abortGetHeldPins", abortGetHeldPins },
     { "/api/getUsedPins", getUsedPins },
     { "/api/getConfig", getConfig },
+    { "/api/getJoystickCenter", getJoystickCenter },
+    { "/api/getJoystickCenter2", getJoystickCenter2 },
 #if !defined(NDEBUG)
     { "/api/echo", echo },
 #endif
diff --git a/www/src/Addons/Analog.tsx b/www/src/Addons/Analog.tsx
index c2431dc8..8e52a59e 100644
--- a/www/src/Addons/Analog.tsx
+++ b/www/src/Addons/Analog.tsx
@@ -1,4 +1,4 @@
-import { useContext } from 'react';
+import { useContext, useState } from 'react';
 import { useTranslation } from 'react-i18next';
 import { FormCheck, Row, Tab, Tabs } from 'react-bootstrap';
 import * as yup from 'yup';
@@ -133,6 +133,22 @@ export const analogScheme = {
 		.number()
 		.label('Error Rate 2')
 		.validateSelectionWhenValue('AnalogInputEnabled', ANALOG_ERROR_RATES),
+	joystickCenterX: yup
+		.number()
+		.label('Joystick Center X')
+		.validateRangeWhenValue('AnalogInputEnabled', 0, 4095),
+	joystickCenterY: yup
+		.number()
+		.label('Joystick Center Y')
+		.validateRangeWhenValue('AnalogInputEnabled', 0, 4095),
+	joystickCenterX2: yup
+		.number()
+		.label('Joystick Center X2')
+		.validateRangeWhenValue('AnalogInputEnabled', 0, 4095),
+	joystickCenterY2: yup
+		.number()
+		.label('Joystick Center Y2')
+		.validateRangeWhenValue('AnalogInputEnabled', 0, 4095),
 };
 
 export const analogState = {
@@ -153,6 +169,10 @@ export const analogState = {
 	outer_deadzone2: 95,
 	auto_calibrate: 0,
 	auto_calibrate2: 0,
+	joystickCenterX: 0,
+	joystickCenterY: 0,
+	joystickCenterX2: 0,
+	joystickCenterY2: 0,
 	analog_smoothing: 0,
 	analog_smoothing2: 0,
 	smoothing_factor: 5,
@@ -161,7 +181,7 @@ export const analogState = {
 	analog_error2: 1,
 };
 
-const Analog = ({ values, errors, handleChange, handleCheckbox }: AddonPropTypes) => {
+const Analog = ({ values, errors, handleChange, handleCheckbox, setFieldValue }: AddonPropTypes) => {
 	const { usedPins } = useContext(AppContext);
 	const { t } = useTranslation();
 	const availableAnalogPins = ANALOG_PINS.filter(
@@ -346,18 +366,133 @@ const Analog = ({ values, errors, handleChange, handleCheckbox }: AddonPropTypes
 										))}
 									</FormSelect>
 								</Row>
-								<FormCheck
-									label={t('AddonsConfig:analog-auto-calibrate')}
-									type="switch"
-									id="Auto_calibrate"
-									className="col-sm-3 ms-3"
-									isInvalid={false}
-									checked={Boolean(values.auto_calibrate)}
-									onChange={(e) => {
-										handleCheckbox('auto_calibrate');
-										handleChange(e);
-									}}
-								/>
+								<div className="d-flex align-items-center">
+									<FormCheck
+										label={t('AddonsConfig:analog-auto-calibrate')}
+										type="switch"
+										id="Auto_calibrate"
+										className="col-sm-3 ms-3"
+										isInvalid={false}
+										checked={Boolean(values.auto_calibrate)}
+										onChange={(e) => {
+											handleCheckbox('auto_calibrate');
+											handleChange(e);
+										}}
+									/>
+									<button
+										type="button"
+										className="btn btn-sm btn-outline-secondary ms-2"
+										disabled={Boolean(values.auto_calibrate)}
+										onClick={async () => {
+											try {
+												// 多步骤校准流程
+												const steps = [
+													{ direction: '左上', position: 'top-left' },
+													{ direction: '右上', position: 'top-right' },
+													{ direction: '左下', position: 'bottom-left' },
+													{ direction: '右下', position: 'bottom-right' }
+												];
+												
+												const calibrationValues = [];
+												
+												for (let i = 0; i < steps.length; i++) {
+													const step = steps[i];
+													const stepNumber = i + 1;
+													
+													// 显示提示框
+													const userConfirmed = confirm(
+														`校准步骤 ${stepNumber}/4\n\n` +
+														`请将摇杆1拨动到${step.direction}位置，然后松开让其回中\n\n` +
+														`确认摇杆1已回中后，点击"确定"记录中心值${stepNumber}`
+													);
+													
+													if (!userConfirmed) {
+														alert('校准已取消');
+														return;
+													}
+													
+													// 读取当前中心值
+													console.log(`Fetching joystick 1 center for step ${stepNumber}...`);
+													const res = await fetch('/api/getJoystickCenter');
+													console.log('Response status:', res.status);
+													
+													if (!res.ok) {
+														throw new Error(`HTTP error! status: ${res.status}`);
+													}
+													
+													const data = await res.json();
+													console.log('Response data:', data);
+													
+													if (!data.success || data.error) {
+														alert(`校准失败: ${data.error || 'Unknown error'}`);
+														console.error('API Error:', data.error);
+														return;
+													}
+													
+													calibrationValues.push({
+														step: stepNumber,
+														direction: step.direction,
+														x: data.x || 0,
+														y: data.y || 0
+													});
+													
+													console.log(`Step ${stepNumber} completed:`, calibrationValues[i]);
+												}
+												
+												// 计算四个点的中心值
+												const avgX = Math.round(calibrationValues.reduce((sum, val) => sum + val.x, 0) / 4);
+												const avgY = Math.round(calibrationValues.reduce((sum, val) => sum + val.y, 0) / 4);
+												
+												// 更新摇杆1的中心值
+												setFieldValue('joystickCenterX', avgX);
+												setFieldValue('joystickCenterY', avgY);
+												
+												console.log('Calibration completed:', {
+													values: calibrationValues,
+													finalCenter: { x: avgX, y: avgY }
+												});
+												
+												// 显示成功提示
+												alert(
+													`摇杆1校准成功！\n\n` +
+													`校准数据：\n` +
+													`• 左上: X=${calibrationValues[0].x}, Y=${calibrationValues[0].y}\n` +
+													`• 右上: X=${calibrationValues[1].x}, Y=${calibrationValues[1].y}\n` +
+													`• 左下: X=${calibrationValues[2].x}, Y=${calibrationValues[2].y}\n` +
+													`• 右下: X=${calibrationValues[3].x}, Y=${calibrationValues[3].y}\n\n` +
+													`最终中心值: X=${avgX}, Y=${avgY}\n\n` +
+													`请保存配置以应用校准值。`
+												);
+											} catch (err) {
+												console.error('Failed to calibrate joystick 1', err);
+												alert('摇杆1校准失败: ' + (err instanceof Error ? err.message : String(err)));
+											}
+										}}
+									>
+										{t('AddonsConfig:analog-calibrate-button') || 'Calibrate Stick 1'}
+									</button>
+									<div className="ms-3 small text-muted">
+										{`Center: X=${values.joystickCenterX}, Y=${values.joystickCenterY}`}
+									</div>
+								</div>
+								{Boolean(values.auto_calibrate) && (
+									<div className="alert alert-info mt-2 mb-3">
+										<small>
+											<strong>摇杆1自动校准已启用：</strong> 系统会在开机时自动读取摇杆1中心值。如需手动校准，请先取消勾选"自动校准"。
+										</small>
+									</div>
+								)}
+								{!Boolean(values.auto_calibrate) && (
+									<div className="alert alert-warning mt-2 mb-3">
+										<small>
+											<strong>摇杆1手动校准模式：</strong> 
+											<br />• 点击"校准"按钮开始多步骤校准流程
+											<br />• 按提示将摇杆拨动到四个方向并回中
+											<br />• 系统将自动计算最佳中心值
+											<br />• 保存配置后重启设备以应用校准
+										</small>
+									</div>
+								)}
 							</Row>
 						</Tab>
 						<Tab
@@ -512,18 +647,133 @@ const Analog = ({ values, errors, handleChange, handleCheckbox }: AddonPropTypes
 										))}
 									</FormSelect>
 								</Row>
-								<FormCheck
-									label={t('AddonsConfig:analog-auto-calibrate')}
-									type="switch"
-									id="Auto_calibrate2"
-									className="col-sm-3 ms-3"
-									isInvalid={false}
-									checked={Boolean(values.auto_calibrate2)}
-									onChange={(e) => {
-										handleCheckbox('auto_calibrate2');
-										handleChange(e);
-									}}
-								/>
+								<div className="d-flex align-items-center">
+									<FormCheck
+										label={t('AddonsConfig:analog-auto-calibrate')}
+										type="switch"
+										id="Auto_calibrate2"
+										className="col-sm-3 ms-3"
+										isInvalid={false}
+										checked={Boolean(values.auto_calibrate2)}
+										onChange={(e) => {
+											handleCheckbox('auto_calibrate2');
+											handleChange(e);
+										}}
+									/>
+									<button
+										type="button"
+										className="btn btn-sm btn-outline-secondary ms-2"
+										disabled={Boolean(values.auto_calibrate2)}
+										onClick={async () => {
+											try {
+												// 多步骤校准流程
+												const steps = [
+													{ direction: '左上', position: 'top-left' },
+													{ direction: '右上', position: 'top-right' },
+													{ direction: '左下', position: 'bottom-left' },
+													{ direction: '右下', position: 'bottom-right' }
+												];
+												
+												const calibrationValues = [];
+												
+												for (let i = 0; i < steps.length; i++) {
+													const step = steps[i];
+													const stepNumber = i + 1;
+													
+													// 显示提示框
+													const userConfirmed = confirm(
+														`校准步骤 ${stepNumber}/4\n\n` +
+														`请将摇杆2拨动到${step.direction}位置，然后松开让其回中\n\n` +
+														`确认摇杆2已回中后，点击"确定"记录中心值${stepNumber}`
+													);
+													
+													if (!userConfirmed) {
+														alert('校准已取消');
+														return;
+													}
+													
+													// 读取当前中心值
+													console.log(`Fetching joystick 2 center for step ${stepNumber}...`);
+													const res = await fetch('/api/getJoystickCenter2');
+													console.log('Response status:', res.status);
+													
+													if (!res.ok) {
+														throw new Error(`HTTP error! status: ${res.status}`);
+													}
+													
+													const data = await res.json();
+													console.log('Response data:', data);
+													
+													if (!data.success || data.error) {
+														alert(`校准失败: ${data.error || 'Unknown error'}`);
+														console.error('API Error:', data.error);
+														return;
+													}
+													
+													calibrationValues.push({
+														step: stepNumber,
+														direction: step.direction,
+														x: data.x || 0,
+														y: data.y || 0
+													});
+													
+													console.log(`Step ${stepNumber} completed:`, calibrationValues[i]);
+												}
+												
+												// 计算四个点的中心值
+												const avgX = Math.round(calibrationValues.reduce((sum, val) => sum + val.x, 0) / 4);
+												const avgY = Math.round(calibrationValues.reduce((sum, val) => sum + val.y, 0) / 4);
+												
+												// 更新摇杆2的中心值
+												setFieldValue('joystickCenterX2', avgX);
+												setFieldValue('joystickCenterY2', avgY);
+												
+												console.log('Calibration completed:', {
+													values: calibrationValues,
+													finalCenter: { x: avgX, y: avgY }
+												});
+												
+												// 显示成功提示
+												alert(
+													`摇杆2校准成功！\n\n` +
+													`校准数据：\n` +
+													`• 左上: X=${calibrationValues[0].x}, Y=${calibrationValues[0].y}\n` +
+													`• 右上: X=${calibrationValues[1].x}, Y=${calibrationValues[1].y}\n` +
+													`• 左下: X=${calibrationValues[2].x}, Y=${calibrationValues[2].y}\n` +
+													`• 右下: X=${calibrationValues[3].x}, Y=${calibrationValues[3].y}\n\n` +
+													`最终中心值: X=${avgX}, Y=${avgY}\n\n` +
+													`请保存配置以应用校准值。`
+												);
+											} catch (err) {
+												console.error('Failed to calibrate joystick 2', err);
+												alert('摇杆2校准失败: ' + (err instanceof Error ? err.message : String(err)));
+											}
+										}}
+									>
+										{t('AddonsConfig:analog-calibrate-button') || 'Calibrate Stick 2'}
+									</button>
+									<div className="ms-3 small text-muted">
+										{`Center: X=${values.joystickCenterX2}, Y=${values.joystickCenterY2}`}
+									</div>
+								</div>
+								{Boolean(values.auto_calibrate2) && (
+									<div className="alert alert-info mt-2 mb-3">
+										<small>
+											<strong>摇杆2自动校准已启用：</strong> 系统会在开机时自动读取摇杆2中心值。如需手动校准，请先取消勾选"自动校准"。
+										</small>
+									</div>
+								)}
+								{!Boolean(values.auto_calibrate2) && (
+									<div className="alert alert-warning mt-2 mb-3">
+										<small>
+											<strong>摇杆2手动校准模式：</strong> 
+											<br />• 点击"校准"按钮开始多步骤校准流程
+											<br />• 按提示将摇杆拨动到四个方向并回中
+											<br />• 系统将自动计算最佳中心值
+											<br />• 保存配置后重启设备以应用校准
+										</small>
+									</div>
+								)}
 							</Row>
 						</Tab>
 					</Tabs>
diff --git a/www/src/Locales/en/AddonsConfig.jsx b/www/src/Locales/en/AddonsConfig.jsx
index feedbdc8..2e2ba3e9 100644
--- a/www/src/Locales/en/AddonsConfig.jsx
+++ b/www/src/Locales/en/AddonsConfig.jsx
@@ -31,6 +31,7 @@ export default {
 	'inner-deadzone-size': 'Inner Deadzone Size (%)',
 	'outer-deadzone-size': 'Outer Deadzone Size (%)',
 	'analog-auto-calibrate': 'Auto Calibration',
+	'analog-calibrate-button': 'Calibrate',
 	'analog-smoothing': 'Analog Smoothing',
 	'smoothing-factor': 'Smoothing Factor',
 	'analog-error-label': 'Error Rate',
diff --git a/www/src/Locales/zh-CN/AddonsConfig.jsx b/www/src/Locales/zh-CN/AddonsConfig.jsx
index bdd6be2f..88d2d7a3 100644
--- a/www/src/Locales/zh-CN/AddonsConfig.jsx
+++ b/www/src/Locales/zh-CN/AddonsConfig.jsx
@@ -28,6 +28,7 @@ export default {
 	'inner-deadzone-size': '内部死区范围 (%)',
 	'outer-deadzone-size': '外部死区范围 (%)',
 	'analog-auto-calibrate': '自动校准',
+	'analog-calibrate-button': '手动校准',
 	'analog-smoothing': '平滑模拟信号',
 	'smoothing-factor': '平滑因数',
 	'analog-error-label': '误差率',
diff --git a/www/src/Locales/zh-CN/LayoutConfig.jsx b/www/src/Locales/zh-CN/LayoutConfig.jsx
index 33320ec2..edbf909f 100644
--- a/www/src/Locales/zh-CN/LayoutConfig.jsx
+++ b/www/src/Locales/zh-CN/LayoutConfig.jsx
@@ -32,7 +32,7 @@ export default {
 			BUTTON_LAYOUT_BM_7KEY_A: 'Beatmania 7 Key Left',
 			BUTTON_LAYOUT_GITADORA_FRET_A: 'Gitadora Fret',
 			BUTTON_LAYOUT_GITADORA_STRUM_A: 'Gitadora Strum',
-			BUTTON_LAYOUT_BOARD_DEFINED_A: 'Board Defined',
+			BUTTON_LAYOUT_BOARD_DEFINED_A: 'Bilibili-花明楼-左',
 			BUTTON_LAYOUT_CUSTOMA: 'Custom',
 			BUTTON_LAYOUT_BANDHERO_FRET_A: 'GH/RB Fret',
 			BUTTON_LAYOUT_BANDHERO_STRUM_A: 'GH/RB Strum',
@@ -48,7 +48,7 @@ export default {
 		},
 		right: {
 			BUTTON_LAYOUT_ARCADE: 'Arcade',
-			BUTTON_LAYOUT_STICKLESSB: 'Stickless',
+			BUTTON_LAYOUT_STICKLESSB: 'Sticklessb',
 			BUTTON_LAYOUT_BUTTONS_ANGLEDB: 'Buttons Angled',
 			BUTTON_LAYOUT_VEWLIX: 'Viewlix',
 			BUTTON_LAYOUT_VEWLIX7: 'Viewlix 7',
@@ -81,7 +81,7 @@ export default {
 			BUTTON_LAYOUT_BM_7KEY_B: 'Beatmania 7 Key Right',
 			BUTTON_LAYOUT_GITADORA_FRET_B: 'Gitadora Fret',
 			BUTTON_LAYOUT_GITADORA_STRUM_B: 'Gitadora Strum',
-			BUTTON_LAYOUT_BOARD_DEFINED_B: 'Board Defined',
+			BUTTON_LAYOUT_BOARD_DEFINED_B: 'Bilibili-花明楼-右',
 			BUTTON_LAYOUT_CUSTOMB: 'Custom',
 			BUTTON_LAYOUT_BANDHERO_FRET_B: 'GH/RB Fret',
 			BUTTON_LAYOUT_BANDHERO_STRUM_B: 'GH/RB Strum',
